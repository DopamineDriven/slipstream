
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AiAgent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model AiAgent
 * 
 */
export type AiAgentModel = runtime.Types.Result.DefaultSelection<Prisma.$AiAgentPayload>

export type AggregateAiAgent = {
  _count: AiAgentCountAggregateOutputType | null
  _min: AiAgentMinAggregateOutputType | null
  _max: AiAgentMaxAggregateOutputType | null
}

export type AiAgentMinAggregateOutputType = {
  id: string | null
  provider: $Enums.Provider | null
  model: string | null
  displayName: string | null
  description: string | null
}

export type AiAgentMaxAggregateOutputType = {
  id: string | null
  provider: $Enums.Provider | null
  model: string | null
  displayName: string | null
  description: string | null
}

export type AiAgentCountAggregateOutputType = {
  id: number
  provider: number
  model: number
  displayName: number
  description: number
  _all: number
}


export type AiAgentMinAggregateInputType = {
  id?: true
  provider?: true
  model?: true
  displayName?: true
  description?: true
}

export type AiAgentMaxAggregateInputType = {
  id?: true
  provider?: true
  model?: true
  displayName?: true
  description?: true
}

export type AiAgentCountAggregateInputType = {
  id?: true
  provider?: true
  model?: true
  displayName?: true
  description?: true
  _all?: true
}

export type AiAgentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AiAgent to aggregate.
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AiAgents to fetch.
   */
  orderBy?: Prisma.AiAgentOrderByWithRelationInput | Prisma.AiAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AiAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AiAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AiAgents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AiAgents
  **/
  _count?: true | AiAgentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AiAgentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AiAgentMaxAggregateInputType
}

export type GetAiAgentAggregateType<T extends AiAgentAggregateArgs> = {
      [P in keyof T & keyof AggregateAiAgent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAiAgent[P]>
    : Prisma.GetScalarType<T[P], AggregateAiAgent[P]>
}




export type AiAgentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AiAgentWhereInput
  orderBy?: Prisma.AiAgentOrderByWithAggregationInput | Prisma.AiAgentOrderByWithAggregationInput[]
  by: Prisma.AiAgentScalarFieldEnum[] | Prisma.AiAgentScalarFieldEnum
  having?: Prisma.AiAgentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AiAgentCountAggregateInputType | true
  _min?: AiAgentMinAggregateInputType
  _max?: AiAgentMaxAggregateInputType
}

export type AiAgentGroupByOutputType = {
  id: string
  provider: $Enums.Provider
  model: string
  displayName: string | null
  description: string | null
  _count: AiAgentCountAggregateOutputType | null
  _min: AiAgentMinAggregateOutputType | null
  _max: AiAgentMaxAggregateOutputType | null
}

type GetAiAgentGroupByPayload<T extends AiAgentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AiAgentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AiAgentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AiAgentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AiAgentGroupByOutputType[P]>
      }
    >
  > 



export type AiAgentWhereInput = {
  AND?: Prisma.AiAgentWhereInput | Prisma.AiAgentWhereInput[]
  OR?: Prisma.AiAgentWhereInput[]
  NOT?: Prisma.AiAgentWhereInput | Prisma.AiAgentWhereInput[]
  id?: Prisma.StringFilter<"AiAgent"> | string
  provider?: Prisma.EnumProviderFilter<"AiAgent"> | $Enums.Provider
  model?: Prisma.StringFilter<"AiAgent"> | string
  displayName?: Prisma.StringNullableFilter<"AiAgent"> | string | null
  description?: Prisma.StringNullableFilter<"AiAgent"> | string | null
  conversations?: Prisma.ConversationListRelationFilter
}

export type AiAgentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  model?: Prisma.SortOrder
  displayName?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  conversations?: Prisma.ConversationOrderByRelationAggregateInput
}

export type AiAgentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AiAgentWhereInput | Prisma.AiAgentWhereInput[]
  OR?: Prisma.AiAgentWhereInput[]
  NOT?: Prisma.AiAgentWhereInput | Prisma.AiAgentWhereInput[]
  provider?: Prisma.EnumProviderFilter<"AiAgent"> | $Enums.Provider
  model?: Prisma.StringFilter<"AiAgent"> | string
  displayName?: Prisma.StringNullableFilter<"AiAgent"> | string | null
  description?: Prisma.StringNullableFilter<"AiAgent"> | string | null
  conversations?: Prisma.ConversationListRelationFilter
}, "id">

export type AiAgentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  model?: Prisma.SortOrder
  displayName?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AiAgentCountOrderByAggregateInput
  _max?: Prisma.AiAgentMaxOrderByAggregateInput
  _min?: Prisma.AiAgentMinOrderByAggregateInput
}

export type AiAgentScalarWhereWithAggregatesInput = {
  AND?: Prisma.AiAgentScalarWhereWithAggregatesInput | Prisma.AiAgentScalarWhereWithAggregatesInput[]
  OR?: Prisma.AiAgentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AiAgentScalarWhereWithAggregatesInput | Prisma.AiAgentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AiAgent"> | string
  provider?: Prisma.EnumProviderWithAggregatesFilter<"AiAgent"> | $Enums.Provider
  model?: Prisma.StringWithAggregatesFilter<"AiAgent"> | string
  displayName?: Prisma.StringNullableWithAggregatesFilter<"AiAgent"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"AiAgent"> | string | null
}

export type AiAgentCreateInput = {
  id?: string
  provider: $Enums.Provider
  model: string
  displayName?: string | null
  description?: string | null
  conversations?: Prisma.ConversationCreateNestedManyWithoutAiAgentInput
}

export type AiAgentUncheckedCreateInput = {
  id?: string
  provider: $Enums.Provider
  model: string
  displayName?: string | null
  description?: string | null
  conversations?: Prisma.ConversationUncheckedCreateNestedManyWithoutAiAgentInput
}

export type AiAgentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  model?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conversations?: Prisma.ConversationUpdateManyWithoutAiAgentNestedInput
}

export type AiAgentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  model?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  conversations?: Prisma.ConversationUncheckedUpdateManyWithoutAiAgentNestedInput
}

export type AiAgentCreateManyInput = {
  id?: string
  provider: $Enums.Provider
  model: string
  displayName?: string | null
  description?: string | null
}

export type AiAgentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  model?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AiAgentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  model?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AiAgentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  model?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type AiAgentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  model?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type AiAgentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  model?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type AiAgentNullableScalarRelationFilter = {
  is?: Prisma.AiAgentWhereInput | null
  isNot?: Prisma.AiAgentWhereInput | null
}

export type AiAgentCreateNestedOneWithoutConversationsInput = {
  create?: Prisma.XOR<Prisma.AiAgentCreateWithoutConversationsInput, Prisma.AiAgentUncheckedCreateWithoutConversationsInput>
  connectOrCreate?: Prisma.AiAgentCreateOrConnectWithoutConversationsInput
  connect?: Prisma.AiAgentWhereUniqueInput
}

export type AiAgentUpdateOneWithoutConversationsNestedInput = {
  create?: Prisma.XOR<Prisma.AiAgentCreateWithoutConversationsInput, Prisma.AiAgentUncheckedCreateWithoutConversationsInput>
  connectOrCreate?: Prisma.AiAgentCreateOrConnectWithoutConversationsInput
  upsert?: Prisma.AiAgentUpsertWithoutConversationsInput
  disconnect?: Prisma.AiAgentWhereInput | boolean
  delete?: Prisma.AiAgentWhereInput | boolean
  connect?: Prisma.AiAgentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AiAgentUpdateToOneWithWhereWithoutConversationsInput, Prisma.AiAgentUpdateWithoutConversationsInput>, Prisma.AiAgentUncheckedUpdateWithoutConversationsInput>
}

export type AiAgentCreateWithoutConversationsInput = {
  id?: string
  provider: $Enums.Provider
  model: string
  displayName?: string | null
  description?: string | null
}

export type AiAgentUncheckedCreateWithoutConversationsInput = {
  id?: string
  provider: $Enums.Provider
  model: string
  displayName?: string | null
  description?: string | null
}

export type AiAgentCreateOrConnectWithoutConversationsInput = {
  where: Prisma.AiAgentWhereUniqueInput
  create: Prisma.XOR<Prisma.AiAgentCreateWithoutConversationsInput, Prisma.AiAgentUncheckedCreateWithoutConversationsInput>
}

export type AiAgentUpsertWithoutConversationsInput = {
  update: Prisma.XOR<Prisma.AiAgentUpdateWithoutConversationsInput, Prisma.AiAgentUncheckedUpdateWithoutConversationsInput>
  create: Prisma.XOR<Prisma.AiAgentCreateWithoutConversationsInput, Prisma.AiAgentUncheckedCreateWithoutConversationsInput>
  where?: Prisma.AiAgentWhereInput
}

export type AiAgentUpdateToOneWithWhereWithoutConversationsInput = {
  where?: Prisma.AiAgentWhereInput
  data: Prisma.XOR<Prisma.AiAgentUpdateWithoutConversationsInput, Prisma.AiAgentUncheckedUpdateWithoutConversationsInput>
}

export type AiAgentUpdateWithoutConversationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  model?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AiAgentUncheckedUpdateWithoutConversationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  model?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type AiAgentCountOutputType
 */

export type AiAgentCountOutputType = {
  conversations: number
}

export type AiAgentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversations?: boolean | AiAgentCountOutputTypeCountConversationsArgs
}

/**
 * AiAgentCountOutputType without action
 */
export type AiAgentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgentCountOutputType
   */
  select?: Prisma.AiAgentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AiAgentCountOutputType without action
 */
export type AiAgentCountOutputTypeCountConversationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConversationWhereInput
}


export type AiAgentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  provider?: boolean
  model?: boolean
  displayName?: boolean
  description?: boolean
  conversations?: boolean | Prisma.AiAgent$conversationsArgs<ExtArgs>
  _count?: boolean | Prisma.AiAgentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["aiAgent"]>

export type AiAgentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  provider?: boolean
  model?: boolean
  displayName?: boolean
  description?: boolean
}, ExtArgs["result"]["aiAgent"]>

export type AiAgentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  provider?: boolean
  model?: boolean
  displayName?: boolean
  description?: boolean
}, ExtArgs["result"]["aiAgent"]>

export type AiAgentSelectScalar = {
  id?: boolean
  provider?: boolean
  model?: boolean
  displayName?: boolean
  description?: boolean
}

export type AiAgentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "provider" | "model" | "displayName" | "description", ExtArgs["result"]["aiAgent"]>
export type AiAgentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversations?: boolean | Prisma.AiAgent$conversationsArgs<ExtArgs>
  _count?: boolean | Prisma.AiAgentCountOutputTypeDefaultArgs<ExtArgs>
}
export type AiAgentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AiAgentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AiAgentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AiAgent"
  objects: {
    conversations: Prisma.$ConversationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    provider: $Enums.Provider
    model: string
    displayName: string | null
    description: string | null
  }, ExtArgs["result"]["aiAgent"]>
  composites: {}
}

export type AiAgentGetPayload<S extends boolean | null | undefined | AiAgentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AiAgentPayload, S>

export type AiAgentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AiAgentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AiAgentCountAggregateInputType | true
  }

export interface AiAgentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiAgent'], meta: { name: 'AiAgent' } }
  /**
   * Find zero or one AiAgent that matches the filter.
   * @param {AiAgentFindUniqueArgs} args - Arguments to find a AiAgent
   * @example
   * // Get one AiAgent
   * const aiAgent = await prisma.aiAgent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AiAgentFindUniqueArgs>(args: Prisma.SelectSubset<T, AiAgentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AiAgent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AiAgentFindUniqueOrThrowArgs} args - Arguments to find a AiAgent
   * @example
   * // Get one AiAgent
   * const aiAgent = await prisma.aiAgent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AiAgentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AiAgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AiAgent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentFindFirstArgs} args - Arguments to find a AiAgent
   * @example
   * // Get one AiAgent
   * const aiAgent = await prisma.aiAgent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AiAgentFindFirstArgs>(args?: Prisma.SelectSubset<T, AiAgentFindFirstArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AiAgent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentFindFirstOrThrowArgs} args - Arguments to find a AiAgent
   * @example
   * // Get one AiAgent
   * const aiAgent = await prisma.aiAgent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AiAgentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AiAgentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AiAgents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AiAgents
   * const aiAgents = await prisma.aiAgent.findMany()
   * 
   * // Get first 10 AiAgents
   * const aiAgents = await prisma.aiAgent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const aiAgentWithIdOnly = await prisma.aiAgent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AiAgentFindManyArgs>(args?: Prisma.SelectSubset<T, AiAgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AiAgent.
   * @param {AiAgentCreateArgs} args - Arguments to create a AiAgent.
   * @example
   * // Create one AiAgent
   * const AiAgent = await prisma.aiAgent.create({
   *   data: {
   *     // ... data to create a AiAgent
   *   }
   * })
   * 
   */
  create<T extends AiAgentCreateArgs>(args: Prisma.SelectSubset<T, AiAgentCreateArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AiAgents.
   * @param {AiAgentCreateManyArgs} args - Arguments to create many AiAgents.
   * @example
   * // Create many AiAgents
   * const aiAgent = await prisma.aiAgent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AiAgentCreateManyArgs>(args?: Prisma.SelectSubset<T, AiAgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AiAgents and returns the data saved in the database.
   * @param {AiAgentCreateManyAndReturnArgs} args - Arguments to create many AiAgents.
   * @example
   * // Create many AiAgents
   * const aiAgent = await prisma.aiAgent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AiAgents and only return the `id`
   * const aiAgentWithIdOnly = await prisma.aiAgent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AiAgentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AiAgentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AiAgent.
   * @param {AiAgentDeleteArgs} args - Arguments to delete one AiAgent.
   * @example
   * // Delete one AiAgent
   * const AiAgent = await prisma.aiAgent.delete({
   *   where: {
   *     // ... filter to delete one AiAgent
   *   }
   * })
   * 
   */
  delete<T extends AiAgentDeleteArgs>(args: Prisma.SelectSubset<T, AiAgentDeleteArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AiAgent.
   * @param {AiAgentUpdateArgs} args - Arguments to update one AiAgent.
   * @example
   * // Update one AiAgent
   * const aiAgent = await prisma.aiAgent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AiAgentUpdateArgs>(args: Prisma.SelectSubset<T, AiAgentUpdateArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AiAgents.
   * @param {AiAgentDeleteManyArgs} args - Arguments to filter AiAgents to delete.
   * @example
   * // Delete a few AiAgents
   * const { count } = await prisma.aiAgent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AiAgentDeleteManyArgs>(args?: Prisma.SelectSubset<T, AiAgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AiAgents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AiAgents
   * const aiAgent = await prisma.aiAgent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AiAgentUpdateManyArgs>(args: Prisma.SelectSubset<T, AiAgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AiAgents and returns the data updated in the database.
   * @param {AiAgentUpdateManyAndReturnArgs} args - Arguments to update many AiAgents.
   * @example
   * // Update many AiAgents
   * const aiAgent = await prisma.aiAgent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AiAgents and only return the `id`
   * const aiAgentWithIdOnly = await prisma.aiAgent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AiAgentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AiAgentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AiAgent.
   * @param {AiAgentUpsertArgs} args - Arguments to update or create a AiAgent.
   * @example
   * // Update or create a AiAgent
   * const aiAgent = await prisma.aiAgent.upsert({
   *   create: {
   *     // ... data to create a AiAgent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AiAgent we want to update
   *   }
   * })
   */
  upsert<T extends AiAgentUpsertArgs>(args: Prisma.SelectSubset<T, AiAgentUpsertArgs<ExtArgs>>): Prisma.Prisma__AiAgentClient<runtime.Types.Result.GetResult<Prisma.$AiAgentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AiAgents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentCountArgs} args - Arguments to filter AiAgents to count.
   * @example
   * // Count the number of AiAgents
   * const count = await prisma.aiAgent.count({
   *   where: {
   *     // ... the filter for the AiAgents we want to count
   *   }
   * })
  **/
  count<T extends AiAgentCountArgs>(
    args?: Prisma.Subset<T, AiAgentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AiAgentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AiAgent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AiAgentAggregateArgs>(args: Prisma.Subset<T, AiAgentAggregateArgs>): Prisma.PrismaPromise<GetAiAgentAggregateType<T>>

  /**
   * Group by AiAgent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AiAgentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AiAgentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AiAgentGroupByArgs['orderBy'] }
      : { orderBy?: AiAgentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AiAgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AiAgent model
 */
readonly fields: AiAgentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AiAgent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AiAgentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  conversations<T extends Prisma.AiAgent$conversationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AiAgent$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AiAgent model
 */
export interface AiAgentFieldRefs {
  readonly id: Prisma.FieldRef<"AiAgent", 'String'>
  readonly provider: Prisma.FieldRef<"AiAgent", 'Provider'>
  readonly model: Prisma.FieldRef<"AiAgent", 'String'>
  readonly displayName: Prisma.FieldRef<"AiAgent", 'String'>
  readonly description: Prisma.FieldRef<"AiAgent", 'String'>
}
    

// Custom InputTypes
/**
 * AiAgent findUnique
 */
export type AiAgentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * Filter, which AiAgent to fetch.
   */
  where: Prisma.AiAgentWhereUniqueInput
}

/**
 * AiAgent findUniqueOrThrow
 */
export type AiAgentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * Filter, which AiAgent to fetch.
   */
  where: Prisma.AiAgentWhereUniqueInput
}

/**
 * AiAgent findFirst
 */
export type AiAgentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * Filter, which AiAgent to fetch.
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AiAgents to fetch.
   */
  orderBy?: Prisma.AiAgentOrderByWithRelationInput | Prisma.AiAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AiAgents.
   */
  cursor?: Prisma.AiAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AiAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AiAgents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AiAgents.
   */
  distinct?: Prisma.AiAgentScalarFieldEnum | Prisma.AiAgentScalarFieldEnum[]
}

/**
 * AiAgent findFirstOrThrow
 */
export type AiAgentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * Filter, which AiAgent to fetch.
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AiAgents to fetch.
   */
  orderBy?: Prisma.AiAgentOrderByWithRelationInput | Prisma.AiAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AiAgents.
   */
  cursor?: Prisma.AiAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AiAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AiAgents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AiAgents.
   */
  distinct?: Prisma.AiAgentScalarFieldEnum | Prisma.AiAgentScalarFieldEnum[]
}

/**
 * AiAgent findMany
 */
export type AiAgentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * Filter, which AiAgents to fetch.
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AiAgents to fetch.
   */
  orderBy?: Prisma.AiAgentOrderByWithRelationInput | Prisma.AiAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AiAgents.
   */
  cursor?: Prisma.AiAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AiAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AiAgents.
   */
  skip?: number
  distinct?: Prisma.AiAgentScalarFieldEnum | Prisma.AiAgentScalarFieldEnum[]
}

/**
 * AiAgent create
 */
export type AiAgentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * The data needed to create a AiAgent.
   */
  data: Prisma.XOR<Prisma.AiAgentCreateInput, Prisma.AiAgentUncheckedCreateInput>
}

/**
 * AiAgent createMany
 */
export type AiAgentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AiAgents.
   */
  data: Prisma.AiAgentCreateManyInput | Prisma.AiAgentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AiAgent createManyAndReturn
 */
export type AiAgentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * The data used to create many AiAgents.
   */
  data: Prisma.AiAgentCreateManyInput | Prisma.AiAgentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AiAgent update
 */
export type AiAgentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * The data needed to update a AiAgent.
   */
  data: Prisma.XOR<Prisma.AiAgentUpdateInput, Prisma.AiAgentUncheckedUpdateInput>
  /**
   * Choose, which AiAgent to update.
   */
  where: Prisma.AiAgentWhereUniqueInput
}

/**
 * AiAgent updateMany
 */
export type AiAgentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AiAgents.
   */
  data: Prisma.XOR<Prisma.AiAgentUpdateManyMutationInput, Prisma.AiAgentUncheckedUpdateManyInput>
  /**
   * Filter which AiAgents to update
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * Limit how many AiAgents to update.
   */
  limit?: number
}

/**
 * AiAgent updateManyAndReturn
 */
export type AiAgentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * The data used to update AiAgents.
   */
  data: Prisma.XOR<Prisma.AiAgentUpdateManyMutationInput, Prisma.AiAgentUncheckedUpdateManyInput>
  /**
   * Filter which AiAgents to update
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * Limit how many AiAgents to update.
   */
  limit?: number
}

/**
 * AiAgent upsert
 */
export type AiAgentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * The filter to search for the AiAgent to update in case it exists.
   */
  where: Prisma.AiAgentWhereUniqueInput
  /**
   * In case the AiAgent found by the `where` argument doesn't exist, create a new AiAgent with this data.
   */
  create: Prisma.XOR<Prisma.AiAgentCreateInput, Prisma.AiAgentUncheckedCreateInput>
  /**
   * In case the AiAgent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AiAgentUpdateInput, Prisma.AiAgentUncheckedUpdateInput>
}

/**
 * AiAgent delete
 */
export type AiAgentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
  /**
   * Filter which AiAgent to delete.
   */
  where: Prisma.AiAgentWhereUniqueInput
}

/**
 * AiAgent deleteMany
 */
export type AiAgentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AiAgents to delete
   */
  where?: Prisma.AiAgentWhereInput
  /**
   * Limit how many AiAgents to delete.
   */
  limit?: number
}

/**
 * AiAgent.conversations
 */
export type AiAgent$conversationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Conversation
   */
  select?: Prisma.ConversationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Conversation
   */
  omit?: Prisma.ConversationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationInclude<ExtArgs> | null
  where?: Prisma.ConversationWhereInput
  orderBy?: Prisma.ConversationOrderByWithRelationInput | Prisma.ConversationOrderByWithRelationInput[]
  cursor?: Prisma.ConversationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ConversationScalarFieldEnum | Prisma.ConversationScalarFieldEnum[]
}

/**
 * AiAgent without action
 */
export type AiAgentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AiAgent
   */
  select?: Prisma.AiAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AiAgent
   */
  omit?: Prisma.AiAgentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AiAgentInclude<ExtArgs> | null
}
