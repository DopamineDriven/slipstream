
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ConversationSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ConversationSettings
 * 
 */
export type ConversationSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$ConversationSettingsPayload>

export type AggregateConversationSettings = {
  _count: ConversationSettingsCountAggregateOutputType | null
  _avg: ConversationSettingsAvgAggregateOutputType | null
  _sum: ConversationSettingsSumAggregateOutputType | null
  _min: ConversationSettingsMinAggregateOutputType | null
  _max: ConversationSettingsMaxAggregateOutputType | null
}

export type ConversationSettingsAvgAggregateOutputType = {
  temperature: number | null
  topP: number | null
}

export type ConversationSettingsSumAggregateOutputType = {
  temperature: number | null
  topP: number | null
}

export type ConversationSettingsMinAggregateOutputType = {
  id: string | null
  conversationId: string | null
  systemPrompt: string | null
  temperature: number | null
  topP: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConversationSettingsMaxAggregateOutputType = {
  id: string | null
  conversationId: string | null
  systemPrompt: string | null
  temperature: number | null
  topP: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConversationSettingsCountAggregateOutputType = {
  id: number
  conversationId: number
  systemPrompt: number
  temperature: number
  topP: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ConversationSettingsAvgAggregateInputType = {
  temperature?: true
  topP?: true
}

export type ConversationSettingsSumAggregateInputType = {
  temperature?: true
  topP?: true
}

export type ConversationSettingsMinAggregateInputType = {
  id?: true
  conversationId?: true
  systemPrompt?: true
  temperature?: true
  topP?: true
  createdAt?: true
  updatedAt?: true
}

export type ConversationSettingsMaxAggregateInputType = {
  id?: true
  conversationId?: true
  systemPrompt?: true
  temperature?: true
  topP?: true
  createdAt?: true
  updatedAt?: true
}

export type ConversationSettingsCountAggregateInputType = {
  id?: true
  conversationId?: true
  systemPrompt?: true
  temperature?: true
  topP?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ConversationSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConversationSettings to aggregate.
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationSettings to fetch.
   */
  orderBy?: Prisma.ConversationSettingsOrderByWithRelationInput | Prisma.ConversationSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConversationSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConversationSettings
  **/
  _count?: true | ConversationSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ConversationSettingsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ConversationSettingsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConversationSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConversationSettingsMaxAggregateInputType
}

export type GetConversationSettingsAggregateType<T extends ConversationSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateConversationSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConversationSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateConversationSettings[P]>
}




export type ConversationSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConversationSettingsWhereInput
  orderBy?: Prisma.ConversationSettingsOrderByWithAggregationInput | Prisma.ConversationSettingsOrderByWithAggregationInput[]
  by: Prisma.ConversationSettingsScalarFieldEnum[] | Prisma.ConversationSettingsScalarFieldEnum
  having?: Prisma.ConversationSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConversationSettingsCountAggregateInputType | true
  _avg?: ConversationSettingsAvgAggregateInputType
  _sum?: ConversationSettingsSumAggregateInputType
  _min?: ConversationSettingsMinAggregateInputType
  _max?: ConversationSettingsMaxAggregateInputType
}

export type ConversationSettingsGroupByOutputType = {
  id: string
  conversationId: string
  systemPrompt: string | null
  temperature: number | null
  topP: number | null
  createdAt: Date
  updatedAt: Date
  _count: ConversationSettingsCountAggregateOutputType | null
  _avg: ConversationSettingsAvgAggregateOutputType | null
  _sum: ConversationSettingsSumAggregateOutputType | null
  _min: ConversationSettingsMinAggregateOutputType | null
  _max: ConversationSettingsMaxAggregateOutputType | null
}

type GetConversationSettingsGroupByPayload<T extends ConversationSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConversationSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConversationSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConversationSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConversationSettingsGroupByOutputType[P]>
      }
    >
  > 



export type ConversationSettingsWhereInput = {
  AND?: Prisma.ConversationSettingsWhereInput | Prisma.ConversationSettingsWhereInput[]
  OR?: Prisma.ConversationSettingsWhereInput[]
  NOT?: Prisma.ConversationSettingsWhereInput | Prisma.ConversationSettingsWhereInput[]
  id?: Prisma.StringFilter<"ConversationSettings"> | string
  conversationId?: Prisma.StringFilter<"ConversationSettings"> | string
  systemPrompt?: Prisma.StringNullableFilter<"ConversationSettings"> | string | null
  temperature?: Prisma.FloatNullableFilter<"ConversationSettings"> | number | null
  topP?: Prisma.FloatNullableFilter<"ConversationSettings"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ConversationSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ConversationSettings"> | Date | string
  conversation?: Prisma.XOR<Prisma.ConversationScalarRelationFilter, Prisma.ConversationWhereInput>
}

export type ConversationSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrderInput | Prisma.SortOrder
  temperature?: Prisma.SortOrderInput | Prisma.SortOrder
  topP?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  conversation?: Prisma.ConversationOrderByWithRelationInput
}

export type ConversationSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  conversationId?: string
  AND?: Prisma.ConversationSettingsWhereInput | Prisma.ConversationSettingsWhereInput[]
  OR?: Prisma.ConversationSettingsWhereInput[]
  NOT?: Prisma.ConversationSettingsWhereInput | Prisma.ConversationSettingsWhereInput[]
  systemPrompt?: Prisma.StringNullableFilter<"ConversationSettings"> | string | null
  temperature?: Prisma.FloatNullableFilter<"ConversationSettings"> | number | null
  topP?: Prisma.FloatNullableFilter<"ConversationSettings"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ConversationSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ConversationSettings"> | Date | string
  conversation?: Prisma.XOR<Prisma.ConversationScalarRelationFilter, Prisma.ConversationWhereInput>
}, "id" | "conversationId">

export type ConversationSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrderInput | Prisma.SortOrder
  temperature?: Prisma.SortOrderInput | Prisma.SortOrder
  topP?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ConversationSettingsCountOrderByAggregateInput
  _avg?: Prisma.ConversationSettingsAvgOrderByAggregateInput
  _max?: Prisma.ConversationSettingsMaxOrderByAggregateInput
  _min?: Prisma.ConversationSettingsMinOrderByAggregateInput
  _sum?: Prisma.ConversationSettingsSumOrderByAggregateInput
}

export type ConversationSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConversationSettingsScalarWhereWithAggregatesInput | Prisma.ConversationSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConversationSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConversationSettingsScalarWhereWithAggregatesInput | Prisma.ConversationSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ConversationSettings"> | string
  conversationId?: Prisma.StringWithAggregatesFilter<"ConversationSettings"> | string
  systemPrompt?: Prisma.StringNullableWithAggregatesFilter<"ConversationSettings"> | string | null
  temperature?: Prisma.FloatNullableWithAggregatesFilter<"ConversationSettings"> | number | null
  topP?: Prisma.FloatNullableWithAggregatesFilter<"ConversationSettings"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ConversationSettings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ConversationSettings"> | Date | string
}

export type ConversationSettingsCreateInput = {
  id?: string
  systemPrompt?: string | null
  temperature?: number | null
  topP?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  conversation: Prisma.ConversationCreateNestedOneWithoutConversationSettingsInput
}

export type ConversationSettingsUncheckedCreateInput = {
  id?: string
  conversationId: string
  systemPrompt?: string | null
  temperature?: number | null
  topP?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConversationSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  temperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  topP?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  conversation?: Prisma.ConversationUpdateOneRequiredWithoutConversationSettingsNestedInput
}

export type ConversationSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  conversationId?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  temperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  topP?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConversationSettingsCreateManyInput = {
  id?: string
  conversationId: string
  systemPrompt?: string | null
  temperature?: number | null
  topP?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConversationSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  temperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  topP?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConversationSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  conversationId?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  temperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  topP?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConversationSettingsNullableScalarRelationFilter = {
  is?: Prisma.ConversationSettingsWhereInput | null
  isNot?: Prisma.ConversationSettingsWhereInput | null
}

export type ConversationSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  temperature?: Prisma.SortOrder
  topP?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConversationSettingsAvgOrderByAggregateInput = {
  temperature?: Prisma.SortOrder
  topP?: Prisma.SortOrder
}

export type ConversationSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  temperature?: Prisma.SortOrder
  topP?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConversationSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversationId?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  temperature?: Prisma.SortOrder
  topP?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConversationSettingsSumOrderByAggregateInput = {
  temperature?: Prisma.SortOrder
  topP?: Prisma.SortOrder
}

export type ConversationSettingsCreateNestedOneWithoutConversationInput = {
  create?: Prisma.XOR<Prisma.ConversationSettingsCreateWithoutConversationInput, Prisma.ConversationSettingsUncheckedCreateWithoutConversationInput>
  connectOrCreate?: Prisma.ConversationSettingsCreateOrConnectWithoutConversationInput
  connect?: Prisma.ConversationSettingsWhereUniqueInput
}

export type ConversationSettingsUncheckedCreateNestedOneWithoutConversationInput = {
  create?: Prisma.XOR<Prisma.ConversationSettingsCreateWithoutConversationInput, Prisma.ConversationSettingsUncheckedCreateWithoutConversationInput>
  connectOrCreate?: Prisma.ConversationSettingsCreateOrConnectWithoutConversationInput
  connect?: Prisma.ConversationSettingsWhereUniqueInput
}

export type ConversationSettingsUpdateOneWithoutConversationNestedInput = {
  create?: Prisma.XOR<Prisma.ConversationSettingsCreateWithoutConversationInput, Prisma.ConversationSettingsUncheckedCreateWithoutConversationInput>
  connectOrCreate?: Prisma.ConversationSettingsCreateOrConnectWithoutConversationInput
  upsert?: Prisma.ConversationSettingsUpsertWithoutConversationInput
  disconnect?: Prisma.ConversationSettingsWhereInput | boolean
  delete?: Prisma.ConversationSettingsWhereInput | boolean
  connect?: Prisma.ConversationSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ConversationSettingsUpdateToOneWithWhereWithoutConversationInput, Prisma.ConversationSettingsUpdateWithoutConversationInput>, Prisma.ConversationSettingsUncheckedUpdateWithoutConversationInput>
}

export type ConversationSettingsUncheckedUpdateOneWithoutConversationNestedInput = {
  create?: Prisma.XOR<Prisma.ConversationSettingsCreateWithoutConversationInput, Prisma.ConversationSettingsUncheckedCreateWithoutConversationInput>
  connectOrCreate?: Prisma.ConversationSettingsCreateOrConnectWithoutConversationInput
  upsert?: Prisma.ConversationSettingsUpsertWithoutConversationInput
  disconnect?: Prisma.ConversationSettingsWhereInput | boolean
  delete?: Prisma.ConversationSettingsWhereInput | boolean
  connect?: Prisma.ConversationSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ConversationSettingsUpdateToOneWithWhereWithoutConversationInput, Prisma.ConversationSettingsUpdateWithoutConversationInput>, Prisma.ConversationSettingsUncheckedUpdateWithoutConversationInput>
}

export type ConversationSettingsCreateWithoutConversationInput = {
  id?: string
  systemPrompt?: string | null
  temperature?: number | null
  topP?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConversationSettingsUncheckedCreateWithoutConversationInput = {
  id?: string
  systemPrompt?: string | null
  temperature?: number | null
  topP?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConversationSettingsCreateOrConnectWithoutConversationInput = {
  where: Prisma.ConversationSettingsWhereUniqueInput
  create: Prisma.XOR<Prisma.ConversationSettingsCreateWithoutConversationInput, Prisma.ConversationSettingsUncheckedCreateWithoutConversationInput>
}

export type ConversationSettingsUpsertWithoutConversationInput = {
  update: Prisma.XOR<Prisma.ConversationSettingsUpdateWithoutConversationInput, Prisma.ConversationSettingsUncheckedUpdateWithoutConversationInput>
  create: Prisma.XOR<Prisma.ConversationSettingsCreateWithoutConversationInput, Prisma.ConversationSettingsUncheckedCreateWithoutConversationInput>
  where?: Prisma.ConversationSettingsWhereInput
}

export type ConversationSettingsUpdateToOneWithWhereWithoutConversationInput = {
  where?: Prisma.ConversationSettingsWhereInput
  data: Prisma.XOR<Prisma.ConversationSettingsUpdateWithoutConversationInput, Prisma.ConversationSettingsUncheckedUpdateWithoutConversationInput>
}

export type ConversationSettingsUpdateWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  temperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  topP?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConversationSettingsUncheckedUpdateWithoutConversationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  temperature?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  topP?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ConversationSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversationId?: boolean
  systemPrompt?: boolean
  temperature?: boolean
  topP?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conversationSettings"]>

export type ConversationSettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversationId?: boolean
  systemPrompt?: boolean
  temperature?: boolean
  topP?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conversationSettings"]>

export type ConversationSettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversationId?: boolean
  systemPrompt?: boolean
  temperature?: boolean
  topP?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["conversationSettings"]>

export type ConversationSettingsSelectScalar = {
  id?: boolean
  conversationId?: boolean
  systemPrompt?: boolean
  temperature?: boolean
  topP?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ConversationSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "conversationId" | "systemPrompt" | "temperature" | "topP" | "createdAt" | "updatedAt", ExtArgs["result"]["conversationSettings"]>
export type ConversationSettingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
}
export type ConversationSettingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
}
export type ConversationSettingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  conversation?: boolean | Prisma.ConversationDefaultArgs<ExtArgs>
}

export type $ConversationSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConversationSettings"
  objects: {
    conversation: Prisma.$ConversationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    conversationId: string
    systemPrompt: string | null
    temperature: number | null
    topP: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["conversationSettings"]>
  composites: {}
}

export type ConversationSettingsGetPayload<S extends boolean | null | undefined | ConversationSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload, S>

export type ConversationSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConversationSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConversationSettingsCountAggregateInputType | true
  }

export interface ConversationSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConversationSettings'], meta: { name: 'ConversationSettings' } }
  /**
   * Find zero or one ConversationSettings that matches the filter.
   * @param {ConversationSettingsFindUniqueArgs} args - Arguments to find a ConversationSettings
   * @example
   * // Get one ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConversationSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, ConversationSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConversationSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConversationSettingsFindUniqueOrThrowArgs} args - Arguments to find a ConversationSettings
   * @example
   * // Get one ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConversationSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConversationSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConversationSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsFindFirstArgs} args - Arguments to find a ConversationSettings
   * @example
   * // Get one ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConversationSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, ConversationSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConversationSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsFindFirstOrThrowArgs} args - Arguments to find a ConversationSettings
   * @example
   * // Get one ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConversationSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConversationSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConversationSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.findMany()
   * 
   * // Get first 10 ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const conversationSettingsWithIdOnly = await prisma.conversationSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConversationSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, ConversationSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConversationSettings.
   * @param {ConversationSettingsCreateArgs} args - Arguments to create a ConversationSettings.
   * @example
   * // Create one ConversationSettings
   * const ConversationSettings = await prisma.conversationSettings.create({
   *   data: {
   *     // ... data to create a ConversationSettings
   *   }
   * })
   * 
   */
  create<T extends ConversationSettingsCreateArgs>(args: Prisma.SelectSubset<T, ConversationSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConversationSettings.
   * @param {ConversationSettingsCreateManyArgs} args - Arguments to create many ConversationSettings.
   * @example
   * // Create many ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConversationSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, ConversationSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConversationSettings and returns the data saved in the database.
   * @param {ConversationSettingsCreateManyAndReturnArgs} args - Arguments to create many ConversationSettings.
   * @example
   * // Create many ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConversationSettings and only return the `id`
   * const conversationSettingsWithIdOnly = await prisma.conversationSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConversationSettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConversationSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConversationSettings.
   * @param {ConversationSettingsDeleteArgs} args - Arguments to delete one ConversationSettings.
   * @example
   * // Delete one ConversationSettings
   * const ConversationSettings = await prisma.conversationSettings.delete({
   *   where: {
   *     // ... filter to delete one ConversationSettings
   *   }
   * })
   * 
   */
  delete<T extends ConversationSettingsDeleteArgs>(args: Prisma.SelectSubset<T, ConversationSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConversationSettings.
   * @param {ConversationSettingsUpdateArgs} args - Arguments to update one ConversationSettings.
   * @example
   * // Update one ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConversationSettingsUpdateArgs>(args: Prisma.SelectSubset<T, ConversationSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConversationSettings.
   * @param {ConversationSettingsDeleteManyArgs} args - Arguments to filter ConversationSettings to delete.
   * @example
   * // Delete a few ConversationSettings
   * const { count } = await prisma.conversationSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConversationSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConversationSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConversationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConversationSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, ConversationSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConversationSettings and returns the data updated in the database.
   * @param {ConversationSettingsUpdateManyAndReturnArgs} args - Arguments to update many ConversationSettings.
   * @example
   * // Update many ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConversationSettings and only return the `id`
   * const conversationSettingsWithIdOnly = await prisma.conversationSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConversationSettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConversationSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConversationSettings.
   * @param {ConversationSettingsUpsertArgs} args - Arguments to update or create a ConversationSettings.
   * @example
   * // Update or create a ConversationSettings
   * const conversationSettings = await prisma.conversationSettings.upsert({
   *   create: {
   *     // ... data to create a ConversationSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConversationSettings we want to update
   *   }
   * })
   */
  upsert<T extends ConversationSettingsUpsertArgs>(args: Prisma.SelectSubset<T, ConversationSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__ConversationSettingsClient<runtime.Types.Result.GetResult<Prisma.$ConversationSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConversationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsCountArgs} args - Arguments to filter ConversationSettings to count.
   * @example
   * // Count the number of ConversationSettings
   * const count = await prisma.conversationSettings.count({
   *   where: {
   *     // ... the filter for the ConversationSettings we want to count
   *   }
   * })
  **/
  count<T extends ConversationSettingsCountArgs>(
    args?: Prisma.Subset<T, ConversationSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConversationSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConversationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConversationSettingsAggregateArgs>(args: Prisma.Subset<T, ConversationSettingsAggregateArgs>): Prisma.PrismaPromise<GetConversationSettingsAggregateType<T>>

  /**
   * Group by ConversationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConversationSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConversationSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConversationSettingsGroupByArgs['orderBy'] }
      : { orderBy?: ConversationSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConversationSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConversationSettings model
 */
readonly fields: ConversationSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConversationSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConversationSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  conversation<T extends Prisma.ConversationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ConversationDefaultArgs<ExtArgs>>): Prisma.Prisma__ConversationClient<runtime.Types.Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConversationSettings model
 */
export interface ConversationSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"ConversationSettings", 'String'>
  readonly conversationId: Prisma.FieldRef<"ConversationSettings", 'String'>
  readonly systemPrompt: Prisma.FieldRef<"ConversationSettings", 'String'>
  readonly temperature: Prisma.FieldRef<"ConversationSettings", 'Float'>
  readonly topP: Prisma.FieldRef<"ConversationSettings", 'Float'>
  readonly createdAt: Prisma.FieldRef<"ConversationSettings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ConversationSettings", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ConversationSettings findUnique
 */
export type ConversationSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * Filter, which ConversationSettings to fetch.
   */
  where: Prisma.ConversationSettingsWhereUniqueInput
}

/**
 * ConversationSettings findUniqueOrThrow
 */
export type ConversationSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * Filter, which ConversationSettings to fetch.
   */
  where: Prisma.ConversationSettingsWhereUniqueInput
}

/**
 * ConversationSettings findFirst
 */
export type ConversationSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * Filter, which ConversationSettings to fetch.
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationSettings to fetch.
   */
  orderBy?: Prisma.ConversationSettingsOrderByWithRelationInput | Prisma.ConversationSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConversationSettings.
   */
  cursor?: Prisma.ConversationSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConversationSettings.
   */
  distinct?: Prisma.ConversationSettingsScalarFieldEnum | Prisma.ConversationSettingsScalarFieldEnum[]
}

/**
 * ConversationSettings findFirstOrThrow
 */
export type ConversationSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * Filter, which ConversationSettings to fetch.
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationSettings to fetch.
   */
  orderBy?: Prisma.ConversationSettingsOrderByWithRelationInput | Prisma.ConversationSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConversationSettings.
   */
  cursor?: Prisma.ConversationSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConversationSettings.
   */
  distinct?: Prisma.ConversationSettingsScalarFieldEnum | Prisma.ConversationSettingsScalarFieldEnum[]
}

/**
 * ConversationSettings findMany
 */
export type ConversationSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * Filter, which ConversationSettings to fetch.
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConversationSettings to fetch.
   */
  orderBy?: Prisma.ConversationSettingsOrderByWithRelationInput | Prisma.ConversationSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConversationSettings.
   */
  cursor?: Prisma.ConversationSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConversationSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConversationSettings.
   */
  skip?: number
  distinct?: Prisma.ConversationSettingsScalarFieldEnum | Prisma.ConversationSettingsScalarFieldEnum[]
}

/**
 * ConversationSettings create
 */
export type ConversationSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * The data needed to create a ConversationSettings.
   */
  data: Prisma.XOR<Prisma.ConversationSettingsCreateInput, Prisma.ConversationSettingsUncheckedCreateInput>
}

/**
 * ConversationSettings createMany
 */
export type ConversationSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConversationSettings.
   */
  data: Prisma.ConversationSettingsCreateManyInput | Prisma.ConversationSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConversationSettings createManyAndReturn
 */
export type ConversationSettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * The data used to create many ConversationSettings.
   */
  data: Prisma.ConversationSettingsCreateManyInput | Prisma.ConversationSettingsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ConversationSettings update
 */
export type ConversationSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * The data needed to update a ConversationSettings.
   */
  data: Prisma.XOR<Prisma.ConversationSettingsUpdateInput, Prisma.ConversationSettingsUncheckedUpdateInput>
  /**
   * Choose, which ConversationSettings to update.
   */
  where: Prisma.ConversationSettingsWhereUniqueInput
}

/**
 * ConversationSettings updateMany
 */
export type ConversationSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConversationSettings.
   */
  data: Prisma.XOR<Prisma.ConversationSettingsUpdateManyMutationInput, Prisma.ConversationSettingsUncheckedUpdateManyInput>
  /**
   * Filter which ConversationSettings to update
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * Limit how many ConversationSettings to update.
   */
  limit?: number
}

/**
 * ConversationSettings updateManyAndReturn
 */
export type ConversationSettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * The data used to update ConversationSettings.
   */
  data: Prisma.XOR<Prisma.ConversationSettingsUpdateManyMutationInput, Prisma.ConversationSettingsUncheckedUpdateManyInput>
  /**
   * Filter which ConversationSettings to update
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * Limit how many ConversationSettings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ConversationSettings upsert
 */
export type ConversationSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * The filter to search for the ConversationSettings to update in case it exists.
   */
  where: Prisma.ConversationSettingsWhereUniqueInput
  /**
   * In case the ConversationSettings found by the `where` argument doesn't exist, create a new ConversationSettings with this data.
   */
  create: Prisma.XOR<Prisma.ConversationSettingsCreateInput, Prisma.ConversationSettingsUncheckedCreateInput>
  /**
   * In case the ConversationSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConversationSettingsUpdateInput, Prisma.ConversationSettingsUncheckedUpdateInput>
}

/**
 * ConversationSettings delete
 */
export type ConversationSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
  /**
   * Filter which ConversationSettings to delete.
   */
  where: Prisma.ConversationSettingsWhereUniqueInput
}

/**
 * ConversationSettings deleteMany
 */
export type ConversationSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConversationSettings to delete
   */
  where?: Prisma.ConversationSettingsWhereInput
  /**
   * Limit how many ConversationSettings to delete.
   */
  limit?: number
}

/**
 * ConversationSettings without action
 */
export type ConversationSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConversationSettings
   */
  select?: Prisma.ConversationSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConversationSettings
   */
  omit?: Prisma.ConversationSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConversationSettingsInclude<ExtArgs> | null
}
