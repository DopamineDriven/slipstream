
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ImageMetadata` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ImageMetadata
 * 
 */
export type ImageMetadataModel = runtime.Types.Result.DefaultSelection<Prisma.$ImageMetadataPayload>

export type AggregateImageMetadata = {
  _count: ImageMetadataCountAggregateOutputType | null
  _avg: ImageMetadataAvgAggregateOutputType | null
  _sum: ImageMetadataSumAggregateOutputType | null
  _min: ImageMetadataMinAggregateOutputType | null
  _max: ImageMetadataMaxAggregateOutputType | null
}

export type ImageMetadataAvgAggregateOutputType = {
  width: number | null
  height: number | null
  aspectRatio: number | null
  frames: number | null
  orientation: number | null
  gpsLat: runtime.Decimal | null
  gpsLon: runtime.Decimal | null
}

export type ImageMetadataSumAggregateOutputType = {
  width: number | null
  height: number | null
  aspectRatio: number | null
  frames: number | null
  orientation: number | null
  gpsLat: runtime.Decimal | null
  gpsLon: runtime.Decimal | null
}

export type ImageMetadataMinAggregateOutputType = {
  attachmentId: string | null
  format: $Enums.ImageFormat | null
  width: number | null
  height: number | null
  aspectRatio: number | null
  frames: number | null
  hasAlpha: boolean | null
  animated: boolean | null
  orientation: number | null
  colorSpace: $Enums.ColorSpace | null
  exifDateTimeOriginal: Date | null
  cameraMake: string | null
  cameraModel: string | null
  lensModel: string | null
  gpsLat: runtime.Decimal | null
  gpsLon: runtime.Decimal | null
  dominantColorHex: string | null
  iccProfile: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ImageMetadataMaxAggregateOutputType = {
  attachmentId: string | null
  format: $Enums.ImageFormat | null
  width: number | null
  height: number | null
  aspectRatio: number | null
  frames: number | null
  hasAlpha: boolean | null
  animated: boolean | null
  orientation: number | null
  colorSpace: $Enums.ColorSpace | null
  exifDateTimeOriginal: Date | null
  cameraMake: string | null
  cameraModel: string | null
  lensModel: string | null
  gpsLat: runtime.Decimal | null
  gpsLon: runtime.Decimal | null
  dominantColorHex: string | null
  iccProfile: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ImageMetadataCountAggregateOutputType = {
  attachmentId: number
  format: number
  width: number
  height: number
  aspectRatio: number
  frames: number
  hasAlpha: number
  animated: number
  orientation: number
  colorSpace: number
  exifDateTimeOriginal: number
  cameraMake: number
  cameraModel: number
  lensModel: number
  gpsLat: number
  gpsLon: number
  dominantColorHex: number
  iccProfile: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ImageMetadataAvgAggregateInputType = {
  width?: true
  height?: true
  aspectRatio?: true
  frames?: true
  orientation?: true
  gpsLat?: true
  gpsLon?: true
}

export type ImageMetadataSumAggregateInputType = {
  width?: true
  height?: true
  aspectRatio?: true
  frames?: true
  orientation?: true
  gpsLat?: true
  gpsLon?: true
}

export type ImageMetadataMinAggregateInputType = {
  attachmentId?: true
  format?: true
  width?: true
  height?: true
  aspectRatio?: true
  frames?: true
  hasAlpha?: true
  animated?: true
  orientation?: true
  colorSpace?: true
  exifDateTimeOriginal?: true
  cameraMake?: true
  cameraModel?: true
  lensModel?: true
  gpsLat?: true
  gpsLon?: true
  dominantColorHex?: true
  iccProfile?: true
  createdAt?: true
  updatedAt?: true
}

export type ImageMetadataMaxAggregateInputType = {
  attachmentId?: true
  format?: true
  width?: true
  height?: true
  aspectRatio?: true
  frames?: true
  hasAlpha?: true
  animated?: true
  orientation?: true
  colorSpace?: true
  exifDateTimeOriginal?: true
  cameraMake?: true
  cameraModel?: true
  lensModel?: true
  gpsLat?: true
  gpsLon?: true
  dominantColorHex?: true
  iccProfile?: true
  createdAt?: true
  updatedAt?: true
}

export type ImageMetadataCountAggregateInputType = {
  attachmentId?: true
  format?: true
  width?: true
  height?: true
  aspectRatio?: true
  frames?: true
  hasAlpha?: true
  animated?: true
  orientation?: true
  colorSpace?: true
  exifDateTimeOriginal?: true
  cameraMake?: true
  cameraModel?: true
  lensModel?: true
  gpsLat?: true
  gpsLon?: true
  dominantColorHex?: true
  iccProfile?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ImageMetadataAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ImageMetadata to aggregate.
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ImageMetadata to fetch.
   */
  orderBy?: Prisma.ImageMetadataOrderByWithRelationInput | Prisma.ImageMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ImageMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ImageMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ImageMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ImageMetadata
  **/
  _count?: true | ImageMetadataCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ImageMetadataAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ImageMetadataSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ImageMetadataMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ImageMetadataMaxAggregateInputType
}

export type GetImageMetadataAggregateType<T extends ImageMetadataAggregateArgs> = {
      [P in keyof T & keyof AggregateImageMetadata]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateImageMetadata[P]>
    : Prisma.GetScalarType<T[P], AggregateImageMetadata[P]>
}




export type ImageMetadataGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ImageMetadataWhereInput
  orderBy?: Prisma.ImageMetadataOrderByWithAggregationInput | Prisma.ImageMetadataOrderByWithAggregationInput[]
  by: Prisma.ImageMetadataScalarFieldEnum[] | Prisma.ImageMetadataScalarFieldEnum
  having?: Prisma.ImageMetadataScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ImageMetadataCountAggregateInputType | true
  _avg?: ImageMetadataAvgAggregateInputType
  _sum?: ImageMetadataSumAggregateInputType
  _min?: ImageMetadataMinAggregateInputType
  _max?: ImageMetadataMaxAggregateInputType
}

export type ImageMetadataGroupByOutputType = {
  attachmentId: string
  format: $Enums.ImageFormat
  width: number
  height: number
  aspectRatio: number | null
  frames: number
  hasAlpha: boolean | null
  animated: boolean
  orientation: number | null
  colorSpace: $Enums.ColorSpace | null
  exifDateTimeOriginal: Date | null
  cameraMake: string | null
  cameraModel: string | null
  lensModel: string | null
  gpsLat: runtime.Decimal | null
  gpsLon: runtime.Decimal | null
  dominantColorHex: string | null
  iccProfile: string | null
  createdAt: Date
  updatedAt: Date
  _count: ImageMetadataCountAggregateOutputType | null
  _avg: ImageMetadataAvgAggregateOutputType | null
  _sum: ImageMetadataSumAggregateOutputType | null
  _min: ImageMetadataMinAggregateOutputType | null
  _max: ImageMetadataMaxAggregateOutputType | null
}

type GetImageMetadataGroupByPayload<T extends ImageMetadataGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ImageMetadataGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ImageMetadataGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ImageMetadataGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ImageMetadataGroupByOutputType[P]>
      }
    >
  >



export type ImageMetadataWhereInput = {
  AND?: Prisma.ImageMetadataWhereInput | Prisma.ImageMetadataWhereInput[]
  OR?: Prisma.ImageMetadataWhereInput[]
  NOT?: Prisma.ImageMetadataWhereInput | Prisma.ImageMetadataWhereInput[]
  attachmentId?: Prisma.StringFilter<"ImageMetadata"> | string
  format?: Prisma.EnumImageFormatFilter<"ImageMetadata"> | $Enums.ImageFormat
  width?: Prisma.IntFilter<"ImageMetadata"> | number
  height?: Prisma.IntFilter<"ImageMetadata"> | number
  aspectRatio?: Prisma.FloatNullableFilter<"ImageMetadata"> | number | null
  frames?: Prisma.IntFilter<"ImageMetadata"> | number
  hasAlpha?: Prisma.BoolNullableFilter<"ImageMetadata"> | boolean | null
  animated?: Prisma.BoolFilter<"ImageMetadata"> | boolean
  orientation?: Prisma.IntNullableFilter<"ImageMetadata"> | number | null
  colorSpace?: Prisma.EnumColorSpaceNullableFilter<"ImageMetadata"> | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.DateTimeNullableFilter<"ImageMetadata"> | Date | string | null
  cameraMake?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  cameraModel?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  lensModel?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  gpsLat?: Prisma.DecimalNullableFilter<"ImageMetadata"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.DecimalNullableFilter<"ImageMetadata"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  iccProfile?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ImageMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ImageMetadata"> | Date | string
  attachment?: Prisma.XOR<Prisma.AttachmentScalarRelationFilter, Prisma.AttachmentWhereInput>
}

export type ImageMetadataOrderByWithRelationInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrderInput | Prisma.SortOrder
  frames?: Prisma.SortOrder
  hasAlpha?: Prisma.SortOrderInput | Prisma.SortOrder
  animated?: Prisma.SortOrder
  orientation?: Prisma.SortOrderInput | Prisma.SortOrder
  colorSpace?: Prisma.SortOrderInput | Prisma.SortOrder
  exifDateTimeOriginal?: Prisma.SortOrderInput | Prisma.SortOrder
  cameraMake?: Prisma.SortOrderInput | Prisma.SortOrder
  cameraModel?: Prisma.SortOrderInput | Prisma.SortOrder
  lensModel?: Prisma.SortOrderInput | Prisma.SortOrder
  gpsLat?: Prisma.SortOrderInput | Prisma.SortOrder
  gpsLon?: Prisma.SortOrderInput | Prisma.SortOrder
  dominantColorHex?: Prisma.SortOrderInput | Prisma.SortOrder
  iccProfile?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  attachment?: Prisma.AttachmentOrderByWithRelationInput
}

export type ImageMetadataWhereUniqueInput = Prisma.AtLeast<{
  attachmentId?: string
  AND?: Prisma.ImageMetadataWhereInput | Prisma.ImageMetadataWhereInput[]
  OR?: Prisma.ImageMetadataWhereInput[]
  NOT?: Prisma.ImageMetadataWhereInput | Prisma.ImageMetadataWhereInput[]
  format?: Prisma.EnumImageFormatFilter<"ImageMetadata"> | $Enums.ImageFormat
  width?: Prisma.IntFilter<"ImageMetadata"> | number
  height?: Prisma.IntFilter<"ImageMetadata"> | number
  aspectRatio?: Prisma.FloatNullableFilter<"ImageMetadata"> | number | null
  frames?: Prisma.IntFilter<"ImageMetadata"> | number
  hasAlpha?: Prisma.BoolNullableFilter<"ImageMetadata"> | boolean | null
  animated?: Prisma.BoolFilter<"ImageMetadata"> | boolean
  orientation?: Prisma.IntNullableFilter<"ImageMetadata"> | number | null
  colorSpace?: Prisma.EnumColorSpaceNullableFilter<"ImageMetadata"> | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.DateTimeNullableFilter<"ImageMetadata"> | Date | string | null
  cameraMake?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  cameraModel?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  lensModel?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  gpsLat?: Prisma.DecimalNullableFilter<"ImageMetadata"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.DecimalNullableFilter<"ImageMetadata"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  iccProfile?: Prisma.StringNullableFilter<"ImageMetadata"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ImageMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ImageMetadata"> | Date | string
  attachment?: Prisma.XOR<Prisma.AttachmentScalarRelationFilter, Prisma.AttachmentWhereInput>
}, "attachmentId">

export type ImageMetadataOrderByWithAggregationInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrderInput | Prisma.SortOrder
  frames?: Prisma.SortOrder
  hasAlpha?: Prisma.SortOrderInput | Prisma.SortOrder
  animated?: Prisma.SortOrder
  orientation?: Prisma.SortOrderInput | Prisma.SortOrder
  colorSpace?: Prisma.SortOrderInput | Prisma.SortOrder
  exifDateTimeOriginal?: Prisma.SortOrderInput | Prisma.SortOrder
  cameraMake?: Prisma.SortOrderInput | Prisma.SortOrder
  cameraModel?: Prisma.SortOrderInput | Prisma.SortOrder
  lensModel?: Prisma.SortOrderInput | Prisma.SortOrder
  gpsLat?: Prisma.SortOrderInput | Prisma.SortOrder
  gpsLon?: Prisma.SortOrderInput | Prisma.SortOrder
  dominantColorHex?: Prisma.SortOrderInput | Prisma.SortOrder
  iccProfile?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ImageMetadataCountOrderByAggregateInput
  _avg?: Prisma.ImageMetadataAvgOrderByAggregateInput
  _max?: Prisma.ImageMetadataMaxOrderByAggregateInput
  _min?: Prisma.ImageMetadataMinOrderByAggregateInput
  _sum?: Prisma.ImageMetadataSumOrderByAggregateInput
}

export type ImageMetadataScalarWhereWithAggregatesInput = {
  AND?: Prisma.ImageMetadataScalarWhereWithAggregatesInput | Prisma.ImageMetadataScalarWhereWithAggregatesInput[]
  OR?: Prisma.ImageMetadataScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ImageMetadataScalarWhereWithAggregatesInput | Prisma.ImageMetadataScalarWhereWithAggregatesInput[]
  attachmentId?: Prisma.StringWithAggregatesFilter<"ImageMetadata"> | string
  format?: Prisma.EnumImageFormatWithAggregatesFilter<"ImageMetadata"> | $Enums.ImageFormat
  width?: Prisma.IntWithAggregatesFilter<"ImageMetadata"> | number
  height?: Prisma.IntWithAggregatesFilter<"ImageMetadata"> | number
  aspectRatio?: Prisma.FloatNullableWithAggregatesFilter<"ImageMetadata"> | number | null
  frames?: Prisma.IntWithAggregatesFilter<"ImageMetadata"> | number
  hasAlpha?: Prisma.BoolNullableWithAggregatesFilter<"ImageMetadata"> | boolean | null
  animated?: Prisma.BoolWithAggregatesFilter<"ImageMetadata"> | boolean
  orientation?: Prisma.IntNullableWithAggregatesFilter<"ImageMetadata"> | number | null
  colorSpace?: Prisma.EnumColorSpaceNullableWithAggregatesFilter<"ImageMetadata"> | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.DateTimeNullableWithAggregatesFilter<"ImageMetadata"> | Date | string | null
  cameraMake?: Prisma.StringNullableWithAggregatesFilter<"ImageMetadata"> | string | null
  cameraModel?: Prisma.StringNullableWithAggregatesFilter<"ImageMetadata"> | string | null
  lensModel?: Prisma.StringNullableWithAggregatesFilter<"ImageMetadata"> | string | null
  gpsLat?: Prisma.DecimalNullableWithAggregatesFilter<"ImageMetadata"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.DecimalNullableWithAggregatesFilter<"ImageMetadata"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.StringNullableWithAggregatesFilter<"ImageMetadata"> | string | null
  iccProfile?: Prisma.StringNullableWithAggregatesFilter<"ImageMetadata"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ImageMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ImageMetadata"> | Date | string
}

export type ImageMetadataCreateInput = {
  format?: $Enums.ImageFormat
  width: number
  height: number
  aspectRatio?: number | null
  frames?: number
  hasAlpha?: boolean | null
  animated?: boolean
  orientation?: number | null
  colorSpace?: $Enums.ColorSpace | null
  exifDateTimeOriginal?: Date | string | null
  cameraMake?: string | null
  cameraModel?: string | null
  lensModel?: string | null
  gpsLat?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: string | null
  iccProfile?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attachment: Prisma.AttachmentCreateNestedOneWithoutImageInput
}

export type ImageMetadataUncheckedCreateInput = {
  attachmentId: string
  format?: $Enums.ImageFormat
  width: number
  height: number
  aspectRatio?: number | null
  frames?: number
  hasAlpha?: boolean | null
  animated?: boolean
  orientation?: number | null
  colorSpace?: $Enums.ColorSpace | null
  exifDateTimeOriginal?: Date | string | null
  cameraMake?: string | null
  cameraModel?: string | null
  lensModel?: string | null
  gpsLat?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: string | null
  iccProfile?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ImageMetadataUpdateInput = {
  format?: Prisma.EnumImageFormatFieldUpdateOperationsInput | $Enums.ImageFormat
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  aspectRatio?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frames?: Prisma.IntFieldUpdateOperationsInput | number
  hasAlpha?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  animated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orientation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  colorSpace?: Prisma.NullableEnumColorSpaceFieldUpdateOperationsInput | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cameraMake?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cameraModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lensModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gpsLat?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  iccProfile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachment?: Prisma.AttachmentUpdateOneRequiredWithoutImageNestedInput
}

export type ImageMetadataUncheckedUpdateInput = {
  attachmentId?: Prisma.StringFieldUpdateOperationsInput | string
  format?: Prisma.EnumImageFormatFieldUpdateOperationsInput | $Enums.ImageFormat
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  aspectRatio?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frames?: Prisma.IntFieldUpdateOperationsInput | number
  hasAlpha?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  animated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orientation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  colorSpace?: Prisma.NullableEnumColorSpaceFieldUpdateOperationsInput | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cameraMake?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cameraModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lensModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gpsLat?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  iccProfile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ImageMetadataCreateManyInput = {
  attachmentId: string
  format?: $Enums.ImageFormat
  width: number
  height: number
  aspectRatio?: number | null
  frames?: number
  hasAlpha?: boolean | null
  animated?: boolean
  orientation?: number | null
  colorSpace?: $Enums.ColorSpace | null
  exifDateTimeOriginal?: Date | string | null
  cameraMake?: string | null
  cameraModel?: string | null
  lensModel?: string | null
  gpsLat?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: string | null
  iccProfile?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ImageMetadataUpdateManyMutationInput = {
  format?: Prisma.EnumImageFormatFieldUpdateOperationsInput | $Enums.ImageFormat
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  aspectRatio?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frames?: Prisma.IntFieldUpdateOperationsInput | number
  hasAlpha?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  animated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orientation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  colorSpace?: Prisma.NullableEnumColorSpaceFieldUpdateOperationsInput | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cameraMake?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cameraModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lensModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gpsLat?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  iccProfile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ImageMetadataUncheckedUpdateManyInput = {
  attachmentId?: Prisma.StringFieldUpdateOperationsInput | string
  format?: Prisma.EnumImageFormatFieldUpdateOperationsInput | $Enums.ImageFormat
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  aspectRatio?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frames?: Prisma.IntFieldUpdateOperationsInput | number
  hasAlpha?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  animated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orientation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  colorSpace?: Prisma.NullableEnumColorSpaceFieldUpdateOperationsInput | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cameraMake?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cameraModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lensModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gpsLat?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  iccProfile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ImageMetadataNullableScalarRelationFilter = {
  is?: Prisma.ImageMetadataWhereInput | null
  isNot?: Prisma.ImageMetadataWhereInput | null
}

export type ImageMetadataCountOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrder
  frames?: Prisma.SortOrder
  hasAlpha?: Prisma.SortOrder
  animated?: Prisma.SortOrder
  orientation?: Prisma.SortOrder
  colorSpace?: Prisma.SortOrder
  exifDateTimeOriginal?: Prisma.SortOrder
  cameraMake?: Prisma.SortOrder
  cameraModel?: Prisma.SortOrder
  lensModel?: Prisma.SortOrder
  gpsLat?: Prisma.SortOrder
  gpsLon?: Prisma.SortOrder
  dominantColorHex?: Prisma.SortOrder
  iccProfile?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ImageMetadataAvgOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrder
  frames?: Prisma.SortOrder
  orientation?: Prisma.SortOrder
  gpsLat?: Prisma.SortOrder
  gpsLon?: Prisma.SortOrder
}

export type ImageMetadataMaxOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrder
  frames?: Prisma.SortOrder
  hasAlpha?: Prisma.SortOrder
  animated?: Prisma.SortOrder
  orientation?: Prisma.SortOrder
  colorSpace?: Prisma.SortOrder
  exifDateTimeOriginal?: Prisma.SortOrder
  cameraMake?: Prisma.SortOrder
  cameraModel?: Prisma.SortOrder
  lensModel?: Prisma.SortOrder
  gpsLat?: Prisma.SortOrder
  gpsLon?: Prisma.SortOrder
  dominantColorHex?: Prisma.SortOrder
  iccProfile?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ImageMetadataMinOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrder
  frames?: Prisma.SortOrder
  hasAlpha?: Prisma.SortOrder
  animated?: Prisma.SortOrder
  orientation?: Prisma.SortOrder
  colorSpace?: Prisma.SortOrder
  exifDateTimeOriginal?: Prisma.SortOrder
  cameraMake?: Prisma.SortOrder
  cameraModel?: Prisma.SortOrder
  lensModel?: Prisma.SortOrder
  gpsLat?: Prisma.SortOrder
  gpsLon?: Prisma.SortOrder
  dominantColorHex?: Prisma.SortOrder
  iccProfile?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ImageMetadataSumOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  aspectRatio?: Prisma.SortOrder
  frames?: Prisma.SortOrder
  orientation?: Prisma.SortOrder
  gpsLat?: Prisma.SortOrder
  gpsLon?: Prisma.SortOrder
}

export type ImageMetadataCreateNestedOneWithoutAttachmentInput = {
  create?: Prisma.XOR<Prisma.ImageMetadataCreateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.ImageMetadataCreateOrConnectWithoutAttachmentInput
  connect?: Prisma.ImageMetadataWhereUniqueInput
}

export type ImageMetadataUncheckedCreateNestedOneWithoutAttachmentInput = {
  create?: Prisma.XOR<Prisma.ImageMetadataCreateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.ImageMetadataCreateOrConnectWithoutAttachmentInput
  connect?: Prisma.ImageMetadataWhereUniqueInput
}

export type ImageMetadataUpdateOneWithoutAttachmentNestedInput = {
  create?: Prisma.XOR<Prisma.ImageMetadataCreateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.ImageMetadataCreateOrConnectWithoutAttachmentInput
  upsert?: Prisma.ImageMetadataUpsertWithoutAttachmentInput
  disconnect?: Prisma.ImageMetadataWhereInput | boolean
  delete?: Prisma.ImageMetadataWhereInput | boolean
  connect?: Prisma.ImageMetadataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ImageMetadataUpdateToOneWithWhereWithoutAttachmentInput, Prisma.ImageMetadataUpdateWithoutAttachmentInput>, Prisma.ImageMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type ImageMetadataUncheckedUpdateOneWithoutAttachmentNestedInput = {
  create?: Prisma.XOR<Prisma.ImageMetadataCreateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.ImageMetadataCreateOrConnectWithoutAttachmentInput
  upsert?: Prisma.ImageMetadataUpsertWithoutAttachmentInput
  disconnect?: Prisma.ImageMetadataWhereInput | boolean
  delete?: Prisma.ImageMetadataWhereInput | boolean
  connect?: Prisma.ImageMetadataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ImageMetadataUpdateToOneWithWhereWithoutAttachmentInput, Prisma.ImageMetadataUpdateWithoutAttachmentInput>, Prisma.ImageMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type EnumImageFormatFieldUpdateOperationsInput = {
  set?: $Enums.ImageFormat
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableEnumColorSpaceFieldUpdateOperationsInput = {
  set?: $Enums.ColorSpace | null
}

export type NullableDecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type ImageMetadataCreateWithoutAttachmentInput = {
  format?: $Enums.ImageFormat
  width: number
  height: number
  aspectRatio?: number | null
  frames?: number
  hasAlpha?: boolean | null
  animated?: boolean
  orientation?: number | null
  colorSpace?: $Enums.ColorSpace | null
  exifDateTimeOriginal?: Date | string | null
  cameraMake?: string | null
  cameraModel?: string | null
  lensModel?: string | null
  gpsLat?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: string | null
  iccProfile?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ImageMetadataUncheckedCreateWithoutAttachmentInput = {
  format?: $Enums.ImageFormat
  width: number
  height: number
  aspectRatio?: number | null
  frames?: number
  hasAlpha?: boolean | null
  animated?: boolean
  orientation?: number | null
  colorSpace?: $Enums.ColorSpace | null
  exifDateTimeOriginal?: Date | string | null
  cameraMake?: string | null
  cameraModel?: string | null
  lensModel?: string | null
  gpsLat?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: string | null
  iccProfile?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ImageMetadataCreateOrConnectWithoutAttachmentInput = {
  where: Prisma.ImageMetadataWhereUniqueInput
  create: Prisma.XOR<Prisma.ImageMetadataCreateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedCreateWithoutAttachmentInput>
}

export type ImageMetadataUpsertWithoutAttachmentInput = {
  update: Prisma.XOR<Prisma.ImageMetadataUpdateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedUpdateWithoutAttachmentInput>
  create: Prisma.XOR<Prisma.ImageMetadataCreateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedCreateWithoutAttachmentInput>
  where?: Prisma.ImageMetadataWhereInput
}

export type ImageMetadataUpdateToOneWithWhereWithoutAttachmentInput = {
  where?: Prisma.ImageMetadataWhereInput
  data: Prisma.XOR<Prisma.ImageMetadataUpdateWithoutAttachmentInput, Prisma.ImageMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type ImageMetadataUpdateWithoutAttachmentInput = {
  format?: Prisma.EnumImageFormatFieldUpdateOperationsInput | $Enums.ImageFormat
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  aspectRatio?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frames?: Prisma.IntFieldUpdateOperationsInput | number
  hasAlpha?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  animated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orientation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  colorSpace?: Prisma.NullableEnumColorSpaceFieldUpdateOperationsInput | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cameraMake?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cameraModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lensModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gpsLat?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  iccProfile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ImageMetadataUncheckedUpdateWithoutAttachmentInput = {
  format?: Prisma.EnumImageFormatFieldUpdateOperationsInput | $Enums.ImageFormat
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  aspectRatio?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frames?: Prisma.IntFieldUpdateOperationsInput | number
  hasAlpha?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  animated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orientation?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  colorSpace?: Prisma.NullableEnumColorSpaceFieldUpdateOperationsInput | $Enums.ColorSpace | null
  exifDateTimeOriginal?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cameraMake?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cameraModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lensModel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gpsLat?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  gpsLon?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  dominantColorHex?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  iccProfile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ImageMetadataSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  width?: boolean
  height?: boolean
  aspectRatio?: boolean
  frames?: boolean
  hasAlpha?: boolean
  animated?: boolean
  orientation?: boolean
  colorSpace?: boolean
  exifDateTimeOriginal?: boolean
  cameraMake?: boolean
  cameraModel?: boolean
  lensModel?: boolean
  gpsLat?: boolean
  gpsLon?: boolean
  dominantColorHex?: boolean
  iccProfile?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["imageMetadata"]>

export type ImageMetadataSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  width?: boolean
  height?: boolean
  aspectRatio?: boolean
  frames?: boolean
  hasAlpha?: boolean
  animated?: boolean
  orientation?: boolean
  colorSpace?: boolean
  exifDateTimeOriginal?: boolean
  cameraMake?: boolean
  cameraModel?: boolean
  lensModel?: boolean
  gpsLat?: boolean
  gpsLon?: boolean
  dominantColorHex?: boolean
  iccProfile?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["imageMetadata"]>

export type ImageMetadataSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  width?: boolean
  height?: boolean
  aspectRatio?: boolean
  frames?: boolean
  hasAlpha?: boolean
  animated?: boolean
  orientation?: boolean
  colorSpace?: boolean
  exifDateTimeOriginal?: boolean
  cameraMake?: boolean
  cameraModel?: boolean
  lensModel?: boolean
  gpsLat?: boolean
  gpsLon?: boolean
  dominantColorHex?: boolean
  iccProfile?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["imageMetadata"]>

export type ImageMetadataSelectScalar = {
  attachmentId?: boolean
  format?: boolean
  width?: boolean
  height?: boolean
  aspectRatio?: boolean
  frames?: boolean
  hasAlpha?: boolean
  animated?: boolean
  orientation?: boolean
  colorSpace?: boolean
  exifDateTimeOriginal?: boolean
  cameraMake?: boolean
  cameraModel?: boolean
  lensModel?: boolean
  gpsLat?: boolean
  gpsLon?: boolean
  dominantColorHex?: boolean
  iccProfile?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ImageMetadataOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"attachmentId" | "format" | "width" | "height" | "aspectRatio" | "frames" | "hasAlpha" | "animated" | "orientation" | "colorSpace" | "exifDateTimeOriginal" | "cameraMake" | "cameraModel" | "lensModel" | "gpsLat" | "gpsLon" | "dominantColorHex" | "iccProfile" | "createdAt" | "updatedAt", ExtArgs["result"]["imageMetadata"]>
export type ImageMetadataInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}
export type ImageMetadataIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}
export type ImageMetadataIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}

export type $ImageMetadataPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ImageMetadata"
  objects: {
    attachment: Prisma.$AttachmentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    attachmentId: string
    format: $Enums.ImageFormat
    width: number
    height: number
    aspectRatio: number | null
    frames: number
    hasAlpha: boolean | null
    animated: boolean
    orientation: number | null
    colorSpace: $Enums.ColorSpace | null
    exifDateTimeOriginal: Date | null
    cameraMake: string | null
    cameraModel: string | null
    lensModel: string | null
    gpsLat: runtime.Decimal | null
    gpsLon: runtime.Decimal | null
    dominantColorHex: string | null
    iccProfile: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["imageMetadata"]>
  composites: {}
}

export type ImageMetadataGetPayload<S extends boolean | null | undefined | ImageMetadataDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload, S>

export type ImageMetadataCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ImageMetadataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ImageMetadataCountAggregateInputType | true
  }

export interface ImageMetadataDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ImageMetadata'], meta: { name: 'ImageMetadata' } }
  /**
   * Find zero or one ImageMetadata that matches the filter.
   * @param {ImageMetadataFindUniqueArgs} args - Arguments to find a ImageMetadata
   * @example
   * // Get one ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ImageMetadataFindUniqueArgs>(args: Prisma.SelectSubset<T, ImageMetadataFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ImageMetadata that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ImageMetadataFindUniqueOrThrowArgs} args - Arguments to find a ImageMetadata
   * @example
   * // Get one ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ImageMetadataFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ImageMetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ImageMetadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataFindFirstArgs} args - Arguments to find a ImageMetadata
   * @example
   * // Get one ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ImageMetadataFindFirstArgs>(args?: Prisma.SelectSubset<T, ImageMetadataFindFirstArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ImageMetadata that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataFindFirstOrThrowArgs} args - Arguments to find a ImageMetadata
   * @example
   * // Get one ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ImageMetadataFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ImageMetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ImageMetadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.findMany()
   * 
   * // Get first 10 ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.findMany({ take: 10 })
   * 
   * // Only select the `attachmentId`
   * const imageMetadataWithAttachmentIdOnly = await prisma.imageMetadata.findMany({ select: { attachmentId: true } })
   * 
   */
  findMany<T extends ImageMetadataFindManyArgs>(args?: Prisma.SelectSubset<T, ImageMetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ImageMetadata.
   * @param {ImageMetadataCreateArgs} args - Arguments to create a ImageMetadata.
   * @example
   * // Create one ImageMetadata
   * const ImageMetadata = await prisma.imageMetadata.create({
   *   data: {
   *     // ... data to create a ImageMetadata
   *   }
   * })
   * 
   */
  create<T extends ImageMetadataCreateArgs>(args: Prisma.SelectSubset<T, ImageMetadataCreateArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ImageMetadata.
   * @param {ImageMetadataCreateManyArgs} args - Arguments to create many ImageMetadata.
   * @example
   * // Create many ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ImageMetadataCreateManyArgs>(args?: Prisma.SelectSubset<T, ImageMetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ImageMetadata and returns the data saved in the database.
   * @param {ImageMetadataCreateManyAndReturnArgs} args - Arguments to create many ImageMetadata.
   * @example
   * // Create many ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ImageMetadata and only return the `attachmentId`
   * const imageMetadataWithAttachmentIdOnly = await prisma.imageMetadata.createManyAndReturn({
   *   select: { attachmentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ImageMetadataCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ImageMetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ImageMetadata.
   * @param {ImageMetadataDeleteArgs} args - Arguments to delete one ImageMetadata.
   * @example
   * // Delete one ImageMetadata
   * const ImageMetadata = await prisma.imageMetadata.delete({
   *   where: {
   *     // ... filter to delete one ImageMetadata
   *   }
   * })
   * 
   */
  delete<T extends ImageMetadataDeleteArgs>(args: Prisma.SelectSubset<T, ImageMetadataDeleteArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ImageMetadata.
   * @param {ImageMetadataUpdateArgs} args - Arguments to update one ImageMetadata.
   * @example
   * // Update one ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ImageMetadataUpdateArgs>(args: Prisma.SelectSubset<T, ImageMetadataUpdateArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ImageMetadata.
   * @param {ImageMetadataDeleteManyArgs} args - Arguments to filter ImageMetadata to delete.
   * @example
   * // Delete a few ImageMetadata
   * const { count } = await prisma.imageMetadata.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ImageMetadataDeleteManyArgs>(args?: Prisma.SelectSubset<T, ImageMetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ImageMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ImageMetadataUpdateManyArgs>(args: Prisma.SelectSubset<T, ImageMetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ImageMetadata and returns the data updated in the database.
   * @param {ImageMetadataUpdateManyAndReturnArgs} args - Arguments to update many ImageMetadata.
   * @example
   * // Update many ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ImageMetadata and only return the `attachmentId`
   * const imageMetadataWithAttachmentIdOnly = await prisma.imageMetadata.updateManyAndReturn({
   *   select: { attachmentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ImageMetadataUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ImageMetadataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ImageMetadata.
   * @param {ImageMetadataUpsertArgs} args - Arguments to update or create a ImageMetadata.
   * @example
   * // Update or create a ImageMetadata
   * const imageMetadata = await prisma.imageMetadata.upsert({
   *   create: {
   *     // ... data to create a ImageMetadata
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ImageMetadata we want to update
   *   }
   * })
   */
  upsert<T extends ImageMetadataUpsertArgs>(args: Prisma.SelectSubset<T, ImageMetadataUpsertArgs<ExtArgs>>): Prisma.Prisma__ImageMetadataClient<runtime.Types.Result.GetResult<Prisma.$ImageMetadataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ImageMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataCountArgs} args - Arguments to filter ImageMetadata to count.
   * @example
   * // Count the number of ImageMetadata
   * const count = await prisma.imageMetadata.count({
   *   where: {
   *     // ... the filter for the ImageMetadata we want to count
   *   }
   * })
  **/
  count<T extends ImageMetadataCountArgs>(
    args?: Prisma.Subset<T, ImageMetadataCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ImageMetadataCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ImageMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ImageMetadataAggregateArgs>(args: Prisma.Subset<T, ImageMetadataAggregateArgs>): Prisma.PrismaPromise<GetImageMetadataAggregateType<T>>

  /**
   * Group by ImageMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImageMetadataGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ImageMetadataGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ImageMetadataGroupByArgs['orderBy'] }
      : { orderBy?: ImageMetadataGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ImageMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ImageMetadata model
 */
readonly fields: ImageMetadataFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ImageMetadata.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ImageMetadataClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  attachment<T extends Prisma.AttachmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AttachmentDefaultArgs<ExtArgs>>): Prisma.Prisma__AttachmentClient<runtime.Types.Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ImageMetadata model
 */
export interface ImageMetadataFieldRefs {
  readonly attachmentId: Prisma.FieldRef<"ImageMetadata", 'String'>
  readonly format: Prisma.FieldRef<"ImageMetadata", 'ImageFormat'>
  readonly width: Prisma.FieldRef<"ImageMetadata", 'Int'>
  readonly height: Prisma.FieldRef<"ImageMetadata", 'Int'>
  readonly aspectRatio: Prisma.FieldRef<"ImageMetadata", 'Float'>
  readonly frames: Prisma.FieldRef<"ImageMetadata", 'Int'>
  readonly hasAlpha: Prisma.FieldRef<"ImageMetadata", 'Boolean'>
  readonly animated: Prisma.FieldRef<"ImageMetadata", 'Boolean'>
  readonly orientation: Prisma.FieldRef<"ImageMetadata", 'Int'>
  readonly colorSpace: Prisma.FieldRef<"ImageMetadata", 'ColorSpace'>
  readonly exifDateTimeOriginal: Prisma.FieldRef<"ImageMetadata", 'DateTime'>
  readonly cameraMake: Prisma.FieldRef<"ImageMetadata", 'String'>
  readonly cameraModel: Prisma.FieldRef<"ImageMetadata", 'String'>
  readonly lensModel: Prisma.FieldRef<"ImageMetadata", 'String'>
  readonly gpsLat: Prisma.FieldRef<"ImageMetadata", 'Decimal'>
  readonly gpsLon: Prisma.FieldRef<"ImageMetadata", 'Decimal'>
  readonly dominantColorHex: Prisma.FieldRef<"ImageMetadata", 'String'>
  readonly iccProfile: Prisma.FieldRef<"ImageMetadata", 'String'>
  readonly createdAt: Prisma.FieldRef<"ImageMetadata", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ImageMetadata", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ImageMetadata findUnique
 */
export type ImageMetadataFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * Filter, which ImageMetadata to fetch.
   */
  where: Prisma.ImageMetadataWhereUniqueInput
}

/**
 * ImageMetadata findUniqueOrThrow
 */
export type ImageMetadataFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * Filter, which ImageMetadata to fetch.
   */
  where: Prisma.ImageMetadataWhereUniqueInput
}

/**
 * ImageMetadata findFirst
 */
export type ImageMetadataFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * Filter, which ImageMetadata to fetch.
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ImageMetadata to fetch.
   */
  orderBy?: Prisma.ImageMetadataOrderByWithRelationInput | Prisma.ImageMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ImageMetadata.
   */
  cursor?: Prisma.ImageMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ImageMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ImageMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ImageMetadata.
   */
  distinct?: Prisma.ImageMetadataScalarFieldEnum | Prisma.ImageMetadataScalarFieldEnum[]
}

/**
 * ImageMetadata findFirstOrThrow
 */
export type ImageMetadataFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * Filter, which ImageMetadata to fetch.
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ImageMetadata to fetch.
   */
  orderBy?: Prisma.ImageMetadataOrderByWithRelationInput | Prisma.ImageMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ImageMetadata.
   */
  cursor?: Prisma.ImageMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ImageMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ImageMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ImageMetadata.
   */
  distinct?: Prisma.ImageMetadataScalarFieldEnum | Prisma.ImageMetadataScalarFieldEnum[]
}

/**
 * ImageMetadata findMany
 */
export type ImageMetadataFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * Filter, which ImageMetadata to fetch.
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ImageMetadata to fetch.
   */
  orderBy?: Prisma.ImageMetadataOrderByWithRelationInput | Prisma.ImageMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ImageMetadata.
   */
  cursor?: Prisma.ImageMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ImageMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ImageMetadata.
   */
  skip?: number
  distinct?: Prisma.ImageMetadataScalarFieldEnum | Prisma.ImageMetadataScalarFieldEnum[]
}

/**
 * ImageMetadata create
 */
export type ImageMetadataCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * The data needed to create a ImageMetadata.
   */
  data: Prisma.XOR<Prisma.ImageMetadataCreateInput, Prisma.ImageMetadataUncheckedCreateInput>
}

/**
 * ImageMetadata createMany
 */
export type ImageMetadataCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ImageMetadata.
   */
  data: Prisma.ImageMetadataCreateManyInput | Prisma.ImageMetadataCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ImageMetadata createManyAndReturn
 */
export type ImageMetadataCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * The data used to create many ImageMetadata.
   */
  data: Prisma.ImageMetadataCreateManyInput | Prisma.ImageMetadataCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ImageMetadata update
 */
export type ImageMetadataUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * The data needed to update a ImageMetadata.
   */
  data: Prisma.XOR<Prisma.ImageMetadataUpdateInput, Prisma.ImageMetadataUncheckedUpdateInput>
  /**
   * Choose, which ImageMetadata to update.
   */
  where: Prisma.ImageMetadataWhereUniqueInput
}

/**
 * ImageMetadata updateMany
 */
export type ImageMetadataUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ImageMetadata.
   */
  data: Prisma.XOR<Prisma.ImageMetadataUpdateManyMutationInput, Prisma.ImageMetadataUncheckedUpdateManyInput>
  /**
   * Filter which ImageMetadata to update
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * Limit how many ImageMetadata to update.
   */
  limit?: number
}

/**
 * ImageMetadata updateManyAndReturn
 */
export type ImageMetadataUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * The data used to update ImageMetadata.
   */
  data: Prisma.XOR<Prisma.ImageMetadataUpdateManyMutationInput, Prisma.ImageMetadataUncheckedUpdateManyInput>
  /**
   * Filter which ImageMetadata to update
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * Limit how many ImageMetadata to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ImageMetadata upsert
 */
export type ImageMetadataUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * The filter to search for the ImageMetadata to update in case it exists.
   */
  where: Prisma.ImageMetadataWhereUniqueInput
  /**
   * In case the ImageMetadata found by the `where` argument doesn't exist, create a new ImageMetadata with this data.
   */
  create: Prisma.XOR<Prisma.ImageMetadataCreateInput, Prisma.ImageMetadataUncheckedCreateInput>
  /**
   * In case the ImageMetadata was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ImageMetadataUpdateInput, Prisma.ImageMetadataUncheckedUpdateInput>
}

/**
 * ImageMetadata delete
 */
export type ImageMetadataDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
  /**
   * Filter which ImageMetadata to delete.
   */
  where: Prisma.ImageMetadataWhereUniqueInput
}

/**
 * ImageMetadata deleteMany
 */
export type ImageMetadataDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ImageMetadata to delete
   */
  where?: Prisma.ImageMetadataWhereInput
  /**
   * Limit how many ImageMetadata to delete.
   */
  limit?: number
}

/**
 * ImageMetadata without action
 */
export type ImageMetadataDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ImageMetadata
   */
  select?: Prisma.ImageMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ImageMetadata
   */
  omit?: Prisma.ImageMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImageMetadataInclude<ExtArgs> | null
}
