
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DocumentMetadata` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model DocumentMetadata
 * 
 */
export type DocumentMetadataModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentMetadataPayload>

export type AggregateDocumentMetadata = {
  _count: DocumentMetadataCountAggregateOutputType | null
  _avg: DocumentMetadataAvgAggregateOutputType | null
  _sum: DocumentMetadataSumAggregateOutputType | null
  _min: DocumentMetadataMinAggregateOutputType | null
  _max: DocumentMetadataMaxAggregateOutputType | null
}

export type DocumentMetadataAvgAggregateOutputType = {
  pageCount: number | null
  wordCount: number | null
  lineCount: number | null
}

export type DocumentMetadataSumAggregateOutputType = {
  pageCount: number | null
  wordCount: number | null
  lineCount: number | null
}

export type DocumentMetadataMinAggregateOutputType = {
  attachmentId: string | null
  format: string | null
  pageCount: number | null
  wordCount: number | null
  language: string | null
  title: string | null
  author: string | null
  subject: string | null
  pdfVersion: string | null
  isEncrypted: boolean | null
  isSearchable: boolean | null
  encoding: string | null
  lineCount: number | null
  textPreview: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DocumentMetadataMaxAggregateOutputType = {
  attachmentId: string | null
  format: string | null
  pageCount: number | null
  wordCount: number | null
  language: string | null
  title: string | null
  author: string | null
  subject: string | null
  pdfVersion: string | null
  isEncrypted: boolean | null
  isSearchable: boolean | null
  encoding: string | null
  lineCount: number | null
  textPreview: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DocumentMetadataCountAggregateOutputType = {
  attachmentId: number
  format: number
  pageCount: number
  wordCount: number
  language: number
  title: number
  author: number
  subject: number
  keywords: number
  pdfVersion: number
  isEncrypted: number
  isSearchable: number
  encoding: number
  lineCount: number
  textPreview: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DocumentMetadataAvgAggregateInputType = {
  pageCount?: true
  wordCount?: true
  lineCount?: true
}

export type DocumentMetadataSumAggregateInputType = {
  pageCount?: true
  wordCount?: true
  lineCount?: true
}

export type DocumentMetadataMinAggregateInputType = {
  attachmentId?: true
  format?: true
  pageCount?: true
  wordCount?: true
  language?: true
  title?: true
  author?: true
  subject?: true
  pdfVersion?: true
  isEncrypted?: true
  isSearchable?: true
  encoding?: true
  lineCount?: true
  textPreview?: true
  createdAt?: true
  updatedAt?: true
}

export type DocumentMetadataMaxAggregateInputType = {
  attachmentId?: true
  format?: true
  pageCount?: true
  wordCount?: true
  language?: true
  title?: true
  author?: true
  subject?: true
  pdfVersion?: true
  isEncrypted?: true
  isSearchable?: true
  encoding?: true
  lineCount?: true
  textPreview?: true
  createdAt?: true
  updatedAt?: true
}

export type DocumentMetadataCountAggregateInputType = {
  attachmentId?: true
  format?: true
  pageCount?: true
  wordCount?: true
  language?: true
  title?: true
  author?: true
  subject?: true
  keywords?: true
  pdfVersion?: true
  isEncrypted?: true
  isSearchable?: true
  encoding?: true
  lineCount?: true
  textPreview?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DocumentMetadataAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentMetadata to aggregate.
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentMetadata to fetch.
   */
  orderBy?: Prisma.DocumentMetadataOrderByWithRelationInput | Prisma.DocumentMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DocumentMetadata
  **/
  _count?: true | DocumentMetadataCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DocumentMetadataAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DocumentMetadataSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentMetadataMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentMetadataMaxAggregateInputType
}

export type GetDocumentMetadataAggregateType<T extends DocumentMetadataAggregateArgs> = {
      [P in keyof T & keyof AggregateDocumentMetadata]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocumentMetadata[P]>
    : Prisma.GetScalarType<T[P], AggregateDocumentMetadata[P]>
}




export type DocumentMetadataGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentMetadataWhereInput
  orderBy?: Prisma.DocumentMetadataOrderByWithAggregationInput | Prisma.DocumentMetadataOrderByWithAggregationInput[]
  by: Prisma.DocumentMetadataScalarFieldEnum[] | Prisma.DocumentMetadataScalarFieldEnum
  having?: Prisma.DocumentMetadataScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentMetadataCountAggregateInputType | true
  _avg?: DocumentMetadataAvgAggregateInputType
  _sum?: DocumentMetadataSumAggregateInputType
  _min?: DocumentMetadataMinAggregateInputType
  _max?: DocumentMetadataMaxAggregateInputType
}

export type DocumentMetadataGroupByOutputType = {
  attachmentId: string
  format: string
  pageCount: number | null
  wordCount: number | null
  language: string | null
  title: string | null
  author: string | null
  subject: string | null
  keywords: string[]
  pdfVersion: string | null
  isEncrypted: boolean
  isSearchable: boolean
  encoding: string | null
  lineCount: number | null
  textPreview: string | null
  createdAt: Date
  updatedAt: Date
  _count: DocumentMetadataCountAggregateOutputType | null
  _avg: DocumentMetadataAvgAggregateOutputType | null
  _sum: DocumentMetadataSumAggregateOutputType | null
  _min: DocumentMetadataMinAggregateOutputType | null
  _max: DocumentMetadataMaxAggregateOutputType | null
}

type GetDocumentMetadataGroupByPayload<T extends DocumentMetadataGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentMetadataGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentMetadataGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentMetadataGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentMetadataGroupByOutputType[P]>
      }
    >
  >



export type DocumentMetadataWhereInput = {
  AND?: Prisma.DocumentMetadataWhereInput | Prisma.DocumentMetadataWhereInput[]
  OR?: Prisma.DocumentMetadataWhereInput[]
  NOT?: Prisma.DocumentMetadataWhereInput | Prisma.DocumentMetadataWhereInput[]
  attachmentId?: Prisma.StringFilter<"DocumentMetadata"> | string
  format?: Prisma.StringFilter<"DocumentMetadata"> | string
  pageCount?: Prisma.IntNullableFilter<"DocumentMetadata"> | number | null
  wordCount?: Prisma.IntNullableFilter<"DocumentMetadata"> | number | null
  language?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  title?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  author?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  subject?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  keywords?: Prisma.StringNullableListFilter<"DocumentMetadata">
  pdfVersion?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  isEncrypted?: Prisma.BoolFilter<"DocumentMetadata"> | boolean
  isSearchable?: Prisma.BoolFilter<"DocumentMetadata"> | boolean
  encoding?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  lineCount?: Prisma.IntNullableFilter<"DocumentMetadata"> | number | null
  textPreview?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DocumentMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DocumentMetadata"> | Date | string
  attachment?: Prisma.XOR<Prisma.AttachmentScalarRelationFilter, Prisma.AttachmentWhereInput>
}

export type DocumentMetadataOrderByWithRelationInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  pageCount?: Prisma.SortOrderInput | Prisma.SortOrder
  wordCount?: Prisma.SortOrderInput | Prisma.SortOrder
  language?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  author?: Prisma.SortOrderInput | Prisma.SortOrder
  subject?: Prisma.SortOrderInput | Prisma.SortOrder
  keywords?: Prisma.SortOrder
  pdfVersion?: Prisma.SortOrderInput | Prisma.SortOrder
  isEncrypted?: Prisma.SortOrder
  isSearchable?: Prisma.SortOrder
  encoding?: Prisma.SortOrderInput | Prisma.SortOrder
  lineCount?: Prisma.SortOrderInput | Prisma.SortOrder
  textPreview?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  attachment?: Prisma.AttachmentOrderByWithRelationInput
}

export type DocumentMetadataWhereUniqueInput = Prisma.AtLeast<{
  attachmentId?: string
  AND?: Prisma.DocumentMetadataWhereInput | Prisma.DocumentMetadataWhereInput[]
  OR?: Prisma.DocumentMetadataWhereInput[]
  NOT?: Prisma.DocumentMetadataWhereInput | Prisma.DocumentMetadataWhereInput[]
  format?: Prisma.StringFilter<"DocumentMetadata"> | string
  pageCount?: Prisma.IntNullableFilter<"DocumentMetadata"> | number | null
  wordCount?: Prisma.IntNullableFilter<"DocumentMetadata"> | number | null
  language?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  title?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  author?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  subject?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  keywords?: Prisma.StringNullableListFilter<"DocumentMetadata">
  pdfVersion?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  isEncrypted?: Prisma.BoolFilter<"DocumentMetadata"> | boolean
  isSearchable?: Prisma.BoolFilter<"DocumentMetadata"> | boolean
  encoding?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  lineCount?: Prisma.IntNullableFilter<"DocumentMetadata"> | number | null
  textPreview?: Prisma.StringNullableFilter<"DocumentMetadata"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DocumentMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DocumentMetadata"> | Date | string
  attachment?: Prisma.XOR<Prisma.AttachmentScalarRelationFilter, Prisma.AttachmentWhereInput>
}, "attachmentId">

export type DocumentMetadataOrderByWithAggregationInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  pageCount?: Prisma.SortOrderInput | Prisma.SortOrder
  wordCount?: Prisma.SortOrderInput | Prisma.SortOrder
  language?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  author?: Prisma.SortOrderInput | Prisma.SortOrder
  subject?: Prisma.SortOrderInput | Prisma.SortOrder
  keywords?: Prisma.SortOrder
  pdfVersion?: Prisma.SortOrderInput | Prisma.SortOrder
  isEncrypted?: Prisma.SortOrder
  isSearchable?: Prisma.SortOrder
  encoding?: Prisma.SortOrderInput | Prisma.SortOrder
  lineCount?: Prisma.SortOrderInput | Prisma.SortOrder
  textPreview?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DocumentMetadataCountOrderByAggregateInput
  _avg?: Prisma.DocumentMetadataAvgOrderByAggregateInput
  _max?: Prisma.DocumentMetadataMaxOrderByAggregateInput
  _min?: Prisma.DocumentMetadataMinOrderByAggregateInput
  _sum?: Prisma.DocumentMetadataSumOrderByAggregateInput
}

export type DocumentMetadataScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentMetadataScalarWhereWithAggregatesInput | Prisma.DocumentMetadataScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentMetadataScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentMetadataScalarWhereWithAggregatesInput | Prisma.DocumentMetadataScalarWhereWithAggregatesInput[]
  attachmentId?: Prisma.StringWithAggregatesFilter<"DocumentMetadata"> | string
  format?: Prisma.StringWithAggregatesFilter<"DocumentMetadata"> | string
  pageCount?: Prisma.IntNullableWithAggregatesFilter<"DocumentMetadata"> | number | null
  wordCount?: Prisma.IntNullableWithAggregatesFilter<"DocumentMetadata"> | number | null
  language?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  title?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  author?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  subject?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  keywords?: Prisma.StringNullableListFilter<"DocumentMetadata">
  pdfVersion?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  isEncrypted?: Prisma.BoolWithAggregatesFilter<"DocumentMetadata"> | boolean
  isSearchable?: Prisma.BoolWithAggregatesFilter<"DocumentMetadata"> | boolean
  encoding?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  lineCount?: Prisma.IntNullableWithAggregatesFilter<"DocumentMetadata"> | number | null
  textPreview?: Prisma.StringNullableWithAggregatesFilter<"DocumentMetadata"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentMetadata"> | Date | string
}

export type DocumentMetadataCreateInput = {
  format: string
  pageCount?: number | null
  wordCount?: number | null
  language?: string | null
  title?: string | null
  author?: string | null
  subject?: string | null
  keywords?: Prisma.DocumentMetadataCreatekeywordsInput | string[]
  pdfVersion?: string | null
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: string | null
  lineCount?: number | null
  textPreview?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  attachment: Prisma.AttachmentCreateNestedOneWithoutDocumentInput
}

export type DocumentMetadataUncheckedCreateInput = {
  attachmentId: string
  format: string
  pageCount?: number | null
  wordCount?: number | null
  language?: string | null
  title?: string | null
  author?: string | null
  subject?: string | null
  keywords?: Prisma.DocumentMetadataCreatekeywordsInput | string[]
  pdfVersion?: string | null
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: string | null
  lineCount?: number | null
  textPreview?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentMetadataUpdateInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  pageCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  wordCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  language?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keywords?: Prisma.DocumentMetadataUpdatekeywordsInput | string[]
  pdfVersion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEncrypted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isSearchable?: Prisma.BoolFieldUpdateOperationsInput | boolean
  encoding?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  textPreview?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachment?: Prisma.AttachmentUpdateOneRequiredWithoutDocumentNestedInput
}

export type DocumentMetadataUncheckedUpdateInput = {
  attachmentId?: Prisma.StringFieldUpdateOperationsInput | string
  format?: Prisma.StringFieldUpdateOperationsInput | string
  pageCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  wordCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  language?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keywords?: Prisma.DocumentMetadataUpdatekeywordsInput | string[]
  pdfVersion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEncrypted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isSearchable?: Prisma.BoolFieldUpdateOperationsInput | boolean
  encoding?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  textPreview?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentMetadataCreateManyInput = {
  attachmentId: string
  format: string
  pageCount?: number | null
  wordCount?: number | null
  language?: string | null
  title?: string | null
  author?: string | null
  subject?: string | null
  keywords?: Prisma.DocumentMetadataCreatekeywordsInput | string[]
  pdfVersion?: string | null
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: string | null
  lineCount?: number | null
  textPreview?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentMetadataUpdateManyMutationInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  pageCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  wordCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  language?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keywords?: Prisma.DocumentMetadataUpdatekeywordsInput | string[]
  pdfVersion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEncrypted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isSearchable?: Prisma.BoolFieldUpdateOperationsInput | boolean
  encoding?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  textPreview?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentMetadataUncheckedUpdateManyInput = {
  attachmentId?: Prisma.StringFieldUpdateOperationsInput | string
  format?: Prisma.StringFieldUpdateOperationsInput | string
  pageCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  wordCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  language?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keywords?: Prisma.DocumentMetadataUpdatekeywordsInput | string[]
  pdfVersion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEncrypted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isSearchable?: Prisma.BoolFieldUpdateOperationsInput | boolean
  encoding?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  textPreview?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentMetadataNullableScalarRelationFilter = {
  is?: Prisma.DocumentMetadataWhereInput | null
  isNot?: Prisma.DocumentMetadataWhereInput | null
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type DocumentMetadataCountOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  pageCount?: Prisma.SortOrder
  wordCount?: Prisma.SortOrder
  language?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  keywords?: Prisma.SortOrder
  pdfVersion?: Prisma.SortOrder
  isEncrypted?: Prisma.SortOrder
  isSearchable?: Prisma.SortOrder
  encoding?: Prisma.SortOrder
  lineCount?: Prisma.SortOrder
  textPreview?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentMetadataAvgOrderByAggregateInput = {
  pageCount?: Prisma.SortOrder
  wordCount?: Prisma.SortOrder
  lineCount?: Prisma.SortOrder
}

export type DocumentMetadataMaxOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  pageCount?: Prisma.SortOrder
  wordCount?: Prisma.SortOrder
  language?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  pdfVersion?: Prisma.SortOrder
  isEncrypted?: Prisma.SortOrder
  isSearchable?: Prisma.SortOrder
  encoding?: Prisma.SortOrder
  lineCount?: Prisma.SortOrder
  textPreview?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentMetadataMinOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  pageCount?: Prisma.SortOrder
  wordCount?: Prisma.SortOrder
  language?: Prisma.SortOrder
  title?: Prisma.SortOrder
  author?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  pdfVersion?: Prisma.SortOrder
  isEncrypted?: Prisma.SortOrder
  isSearchable?: Prisma.SortOrder
  encoding?: Prisma.SortOrder
  lineCount?: Prisma.SortOrder
  textPreview?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentMetadataSumOrderByAggregateInput = {
  pageCount?: Prisma.SortOrder
  wordCount?: Prisma.SortOrder
  lineCount?: Prisma.SortOrder
}

export type DocumentMetadataCreateNestedOneWithoutAttachmentInput = {
  create?: Prisma.XOR<Prisma.DocumentMetadataCreateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.DocumentMetadataCreateOrConnectWithoutAttachmentInput
  connect?: Prisma.DocumentMetadataWhereUniqueInput
}

export type DocumentMetadataUncheckedCreateNestedOneWithoutAttachmentInput = {
  create?: Prisma.XOR<Prisma.DocumentMetadataCreateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.DocumentMetadataCreateOrConnectWithoutAttachmentInput
  connect?: Prisma.DocumentMetadataWhereUniqueInput
}

export type DocumentMetadataUpdateOneWithoutAttachmentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentMetadataCreateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.DocumentMetadataCreateOrConnectWithoutAttachmentInput
  upsert?: Prisma.DocumentMetadataUpsertWithoutAttachmentInput
  disconnect?: Prisma.DocumentMetadataWhereInput | boolean
  delete?: Prisma.DocumentMetadataWhereInput | boolean
  connect?: Prisma.DocumentMetadataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DocumentMetadataUpdateToOneWithWhereWithoutAttachmentInput, Prisma.DocumentMetadataUpdateWithoutAttachmentInput>, Prisma.DocumentMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type DocumentMetadataUncheckedUpdateOneWithoutAttachmentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentMetadataCreateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.DocumentMetadataCreateOrConnectWithoutAttachmentInput
  upsert?: Prisma.DocumentMetadataUpsertWithoutAttachmentInput
  disconnect?: Prisma.DocumentMetadataWhereInput | boolean
  delete?: Prisma.DocumentMetadataWhereInput | boolean
  connect?: Prisma.DocumentMetadataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DocumentMetadataUpdateToOneWithWhereWithoutAttachmentInput, Prisma.DocumentMetadataUpdateWithoutAttachmentInput>, Prisma.DocumentMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type DocumentMetadataCreatekeywordsInput = {
  set: string[]
}

export type DocumentMetadataUpdatekeywordsInput = {
  set?: string[]
  push?: string | string[]
}

export type DocumentMetadataCreateWithoutAttachmentInput = {
  format: string
  pageCount?: number | null
  wordCount?: number | null
  language?: string | null
  title?: string | null
  author?: string | null
  subject?: string | null
  keywords?: Prisma.DocumentMetadataCreatekeywordsInput | string[]
  pdfVersion?: string | null
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: string | null
  lineCount?: number | null
  textPreview?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentMetadataUncheckedCreateWithoutAttachmentInput = {
  format: string
  pageCount?: number | null
  wordCount?: number | null
  language?: string | null
  title?: string | null
  author?: string | null
  subject?: string | null
  keywords?: Prisma.DocumentMetadataCreatekeywordsInput | string[]
  pdfVersion?: string | null
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: string | null
  lineCount?: number | null
  textPreview?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentMetadataCreateOrConnectWithoutAttachmentInput = {
  where: Prisma.DocumentMetadataWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentMetadataCreateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedCreateWithoutAttachmentInput>
}

export type DocumentMetadataUpsertWithoutAttachmentInput = {
  update: Prisma.XOR<Prisma.DocumentMetadataUpdateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedUpdateWithoutAttachmentInput>
  create: Prisma.XOR<Prisma.DocumentMetadataCreateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedCreateWithoutAttachmentInput>
  where?: Prisma.DocumentMetadataWhereInput
}

export type DocumentMetadataUpdateToOneWithWhereWithoutAttachmentInput = {
  where?: Prisma.DocumentMetadataWhereInput
  data: Prisma.XOR<Prisma.DocumentMetadataUpdateWithoutAttachmentInput, Prisma.DocumentMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type DocumentMetadataUpdateWithoutAttachmentInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  pageCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  wordCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  language?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keywords?: Prisma.DocumentMetadataUpdatekeywordsInput | string[]
  pdfVersion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEncrypted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isSearchable?: Prisma.BoolFieldUpdateOperationsInput | boolean
  encoding?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  textPreview?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentMetadataUncheckedUpdateWithoutAttachmentInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  pageCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  wordCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  language?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  author?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  subject?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keywords?: Prisma.DocumentMetadataUpdatekeywordsInput | string[]
  pdfVersion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEncrypted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isSearchable?: Prisma.BoolFieldUpdateOperationsInput | boolean
  encoding?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  lineCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  textPreview?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DocumentMetadataSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  pageCount?: boolean
  wordCount?: boolean
  language?: boolean
  title?: boolean
  author?: boolean
  subject?: boolean
  keywords?: boolean
  pdfVersion?: boolean
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: boolean
  lineCount?: boolean
  textPreview?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentMetadata"]>

export type DocumentMetadataSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  pageCount?: boolean
  wordCount?: boolean
  language?: boolean
  title?: boolean
  author?: boolean
  subject?: boolean
  keywords?: boolean
  pdfVersion?: boolean
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: boolean
  lineCount?: boolean
  textPreview?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentMetadata"]>

export type DocumentMetadataSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  pageCount?: boolean
  wordCount?: boolean
  language?: boolean
  title?: boolean
  author?: boolean
  subject?: boolean
  keywords?: boolean
  pdfVersion?: boolean
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: boolean
  lineCount?: boolean
  textPreview?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentMetadata"]>

export type DocumentMetadataSelectScalar = {
  attachmentId?: boolean
  format?: boolean
  pageCount?: boolean
  wordCount?: boolean
  language?: boolean
  title?: boolean
  author?: boolean
  subject?: boolean
  keywords?: boolean
  pdfVersion?: boolean
  isEncrypted?: boolean
  isSearchable?: boolean
  encoding?: boolean
  lineCount?: boolean
  textPreview?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DocumentMetadataOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"attachmentId" | "format" | "pageCount" | "wordCount" | "language" | "title" | "author" | "subject" | "keywords" | "pdfVersion" | "isEncrypted" | "isSearchable" | "encoding" | "lineCount" | "textPreview" | "createdAt" | "updatedAt", ExtArgs["result"]["documentMetadata"]>
export type DocumentMetadataInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}
export type DocumentMetadataIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}
export type DocumentMetadataIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}

export type $DocumentMetadataPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DocumentMetadata"
  objects: {
    attachment: Prisma.$AttachmentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    attachmentId: string
    format: string
    pageCount: number | null
    wordCount: number | null
    language: string | null
    title: string | null
    author: string | null
    subject: string | null
    keywords: string[]
    pdfVersion: string | null
    isEncrypted: boolean
    isSearchable: boolean
    encoding: string | null
    lineCount: number | null
    textPreview: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["documentMetadata"]>
  composites: {}
}

export type DocumentMetadataGetPayload<S extends boolean | null | undefined | DocumentMetadataDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload, S>

export type DocumentMetadataCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentMetadataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentMetadataCountAggregateInputType | true
  }

export interface DocumentMetadataDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentMetadata'], meta: { name: 'DocumentMetadata' } }
  /**
   * Find zero or one DocumentMetadata that matches the filter.
   * @param {DocumentMetadataFindUniqueArgs} args - Arguments to find a DocumentMetadata
   * @example
   * // Get one DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentMetadataFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentMetadataFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DocumentMetadata that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentMetadataFindUniqueOrThrowArgs} args - Arguments to find a DocumentMetadata
   * @example
   * // Get one DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentMetadataFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentMetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentMetadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataFindFirstArgs} args - Arguments to find a DocumentMetadata
   * @example
   * // Get one DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentMetadataFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentMetadataFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentMetadata that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataFindFirstOrThrowArgs} args - Arguments to find a DocumentMetadata
   * @example
   * // Get one DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentMetadataFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentMetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DocumentMetadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.findMany()
   * 
   * // Get first 10 DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.findMany({ take: 10 })
   * 
   * // Only select the `attachmentId`
   * const documentMetadataWithAttachmentIdOnly = await prisma.documentMetadata.findMany({ select: { attachmentId: true } })
   * 
   */
  findMany<T extends DocumentMetadataFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentMetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DocumentMetadata.
   * @param {DocumentMetadataCreateArgs} args - Arguments to create a DocumentMetadata.
   * @example
   * // Create one DocumentMetadata
   * const DocumentMetadata = await prisma.documentMetadata.create({
   *   data: {
   *     // ... data to create a DocumentMetadata
   *   }
   * })
   * 
   */
  create<T extends DocumentMetadataCreateArgs>(args: Prisma.SelectSubset<T, DocumentMetadataCreateArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DocumentMetadata.
   * @param {DocumentMetadataCreateManyArgs} args - Arguments to create many DocumentMetadata.
   * @example
   * // Create many DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DocumentMetadataCreateManyArgs>(args?: Prisma.SelectSubset<T, DocumentMetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DocumentMetadata and returns the data saved in the database.
   * @param {DocumentMetadataCreateManyAndReturnArgs} args - Arguments to create many DocumentMetadata.
   * @example
   * // Create many DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DocumentMetadata and only return the `attachmentId`
   * const documentMetadataWithAttachmentIdOnly = await prisma.documentMetadata.createManyAndReturn({
   *   select: { attachmentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DocumentMetadataCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DocumentMetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DocumentMetadata.
   * @param {DocumentMetadataDeleteArgs} args - Arguments to delete one DocumentMetadata.
   * @example
   * // Delete one DocumentMetadata
   * const DocumentMetadata = await prisma.documentMetadata.delete({
   *   where: {
   *     // ... filter to delete one DocumentMetadata
   *   }
   * })
   * 
   */
  delete<T extends DocumentMetadataDeleteArgs>(args: Prisma.SelectSubset<T, DocumentMetadataDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DocumentMetadata.
   * @param {DocumentMetadataUpdateArgs} args - Arguments to update one DocumentMetadata.
   * @example
   * // Update one DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentMetadataUpdateArgs>(args: Prisma.SelectSubset<T, DocumentMetadataUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DocumentMetadata.
   * @param {DocumentMetadataDeleteManyArgs} args - Arguments to filter DocumentMetadata to delete.
   * @example
   * // Delete a few DocumentMetadata
   * const { count } = await prisma.documentMetadata.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentMetadataDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentMetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentMetadataUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentMetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentMetadata and returns the data updated in the database.
   * @param {DocumentMetadataUpdateManyAndReturnArgs} args - Arguments to update many DocumentMetadata.
   * @example
   * // Update many DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DocumentMetadata and only return the `attachmentId`
   * const documentMetadataWithAttachmentIdOnly = await prisma.documentMetadata.updateManyAndReturn({
   *   select: { attachmentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentMetadataUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentMetadataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DocumentMetadata.
   * @param {DocumentMetadataUpsertArgs} args - Arguments to update or create a DocumentMetadata.
   * @example
   * // Update or create a DocumentMetadata
   * const documentMetadata = await prisma.documentMetadata.upsert({
   *   create: {
   *     // ... data to create a DocumentMetadata
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DocumentMetadata we want to update
   *   }
   * })
   */
  upsert<T extends DocumentMetadataUpsertArgs>(args: Prisma.SelectSubset<T, DocumentMetadataUpsertArgs<ExtArgs>>): Prisma.Prisma__DocumentMetadataClient<runtime.Types.Result.GetResult<Prisma.$DocumentMetadataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DocumentMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataCountArgs} args - Arguments to filter DocumentMetadata to count.
   * @example
   * // Count the number of DocumentMetadata
   * const count = await prisma.documentMetadata.count({
   *   where: {
   *     // ... the filter for the DocumentMetadata we want to count
   *   }
   * })
  **/
  count<T extends DocumentMetadataCountArgs>(
    args?: Prisma.Subset<T, DocumentMetadataCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentMetadataCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DocumentMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentMetadataAggregateArgs>(args: Prisma.Subset<T, DocumentMetadataAggregateArgs>): Prisma.PrismaPromise<GetDocumentMetadataAggregateType<T>>

  /**
   * Group by DocumentMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentMetadataGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentMetadataGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentMetadataGroupByArgs['orderBy'] }
      : { orderBy?: DocumentMetadataGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DocumentMetadata model
 */
readonly fields: DocumentMetadataFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DocumentMetadata.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentMetadataClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  attachment<T extends Prisma.AttachmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AttachmentDefaultArgs<ExtArgs>>): Prisma.Prisma__AttachmentClient<runtime.Types.Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DocumentMetadata model
 */
export interface DocumentMetadataFieldRefs {
  readonly attachmentId: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly format: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly pageCount: Prisma.FieldRef<"DocumentMetadata", 'Int'>
  readonly wordCount: Prisma.FieldRef<"DocumentMetadata", 'Int'>
  readonly language: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly title: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly author: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly subject: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly keywords: Prisma.FieldRef<"DocumentMetadata", 'String[]'>
  readonly pdfVersion: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly isEncrypted: Prisma.FieldRef<"DocumentMetadata", 'Boolean'>
  readonly isSearchable: Prisma.FieldRef<"DocumentMetadata", 'Boolean'>
  readonly encoding: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly lineCount: Prisma.FieldRef<"DocumentMetadata", 'Int'>
  readonly textPreview: Prisma.FieldRef<"DocumentMetadata", 'String'>
  readonly createdAt: Prisma.FieldRef<"DocumentMetadata", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DocumentMetadata", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DocumentMetadata findUnique
 */
export type DocumentMetadataFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * Filter, which DocumentMetadata to fetch.
   */
  where: Prisma.DocumentMetadataWhereUniqueInput
}

/**
 * DocumentMetadata findUniqueOrThrow
 */
export type DocumentMetadataFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * Filter, which DocumentMetadata to fetch.
   */
  where: Prisma.DocumentMetadataWhereUniqueInput
}

/**
 * DocumentMetadata findFirst
 */
export type DocumentMetadataFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * Filter, which DocumentMetadata to fetch.
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentMetadata to fetch.
   */
  orderBy?: Prisma.DocumentMetadataOrderByWithRelationInput | Prisma.DocumentMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentMetadata.
   */
  cursor?: Prisma.DocumentMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentMetadata.
   */
  distinct?: Prisma.DocumentMetadataScalarFieldEnum | Prisma.DocumentMetadataScalarFieldEnum[]
}

/**
 * DocumentMetadata findFirstOrThrow
 */
export type DocumentMetadataFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * Filter, which DocumentMetadata to fetch.
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentMetadata to fetch.
   */
  orderBy?: Prisma.DocumentMetadataOrderByWithRelationInput | Prisma.DocumentMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentMetadata.
   */
  cursor?: Prisma.DocumentMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentMetadata.
   */
  distinct?: Prisma.DocumentMetadataScalarFieldEnum | Prisma.DocumentMetadataScalarFieldEnum[]
}

/**
 * DocumentMetadata findMany
 */
export type DocumentMetadataFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * Filter, which DocumentMetadata to fetch.
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentMetadata to fetch.
   */
  orderBy?: Prisma.DocumentMetadataOrderByWithRelationInput | Prisma.DocumentMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DocumentMetadata.
   */
  cursor?: Prisma.DocumentMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentMetadata.
   */
  skip?: number
  distinct?: Prisma.DocumentMetadataScalarFieldEnum | Prisma.DocumentMetadataScalarFieldEnum[]
}

/**
 * DocumentMetadata create
 */
export type DocumentMetadataCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * The data needed to create a DocumentMetadata.
   */
  data: Prisma.XOR<Prisma.DocumentMetadataCreateInput, Prisma.DocumentMetadataUncheckedCreateInput>
}

/**
 * DocumentMetadata createMany
 */
export type DocumentMetadataCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DocumentMetadata.
   */
  data: Prisma.DocumentMetadataCreateManyInput | Prisma.DocumentMetadataCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DocumentMetadata createManyAndReturn
 */
export type DocumentMetadataCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * The data used to create many DocumentMetadata.
   */
  data: Prisma.DocumentMetadataCreateManyInput | Prisma.DocumentMetadataCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentMetadata update
 */
export type DocumentMetadataUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * The data needed to update a DocumentMetadata.
   */
  data: Prisma.XOR<Prisma.DocumentMetadataUpdateInput, Prisma.DocumentMetadataUncheckedUpdateInput>
  /**
   * Choose, which DocumentMetadata to update.
   */
  where: Prisma.DocumentMetadataWhereUniqueInput
}

/**
 * DocumentMetadata updateMany
 */
export type DocumentMetadataUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DocumentMetadata.
   */
  data: Prisma.XOR<Prisma.DocumentMetadataUpdateManyMutationInput, Prisma.DocumentMetadataUncheckedUpdateManyInput>
  /**
   * Filter which DocumentMetadata to update
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * Limit how many DocumentMetadata to update.
   */
  limit?: number
}

/**
 * DocumentMetadata updateManyAndReturn
 */
export type DocumentMetadataUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * The data used to update DocumentMetadata.
   */
  data: Prisma.XOR<Prisma.DocumentMetadataUpdateManyMutationInput, Prisma.DocumentMetadataUncheckedUpdateManyInput>
  /**
   * Filter which DocumentMetadata to update
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * Limit how many DocumentMetadata to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentMetadata upsert
 */
export type DocumentMetadataUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * The filter to search for the DocumentMetadata to update in case it exists.
   */
  where: Prisma.DocumentMetadataWhereUniqueInput
  /**
   * In case the DocumentMetadata found by the `where` argument doesn't exist, create a new DocumentMetadata with this data.
   */
  create: Prisma.XOR<Prisma.DocumentMetadataCreateInput, Prisma.DocumentMetadataUncheckedCreateInput>
  /**
   * In case the DocumentMetadata was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DocumentMetadataUpdateInput, Prisma.DocumentMetadataUncheckedUpdateInput>
}

/**
 * DocumentMetadata delete
 */
export type DocumentMetadataDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
  /**
   * Filter which DocumentMetadata to delete.
   */
  where: Prisma.DocumentMetadataWhereUniqueInput
}

/**
 * DocumentMetadata deleteMany
 */
export type DocumentMetadataDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentMetadata to delete
   */
  where?: Prisma.DocumentMetadataWhereInput
  /**
   * Limit how many DocumentMetadata to delete.
   */
  limit?: number
}

/**
 * DocumentMetadata without action
 */
export type DocumentMetadataDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentMetadata
   */
  select?: Prisma.DocumentMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentMetadata
   */
  omit?: Prisma.DocumentMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentMetadataInclude<ExtArgs> | null
}
