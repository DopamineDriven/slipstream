
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AudioMetadata` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model AudioMetadata
 * 
 */
export type AudioMetadataModel = runtime.Types.Result.DefaultSelection<Prisma.$AudioMetadataPayload>

export type AggregateAudioMetadata = {
  _count: AudioMetadataCountAggregateOutputType | null
  _avg: AudioMetadataAvgAggregateOutputType | null
  _sum: AudioMetadataSumAggregateOutputType | null
  _min: AudioMetadataMinAggregateOutputType | null
  _max: AudioMetadataMaxAggregateOutputType | null
}

export type AudioMetadataAvgAggregateOutputType = {
  duration: number | null
  bitrate: number | null
  sampleRate: number | null
  channels: number | null
  year: number | null
  waveformPeaks: number | null
}

export type AudioMetadataSumAggregateOutputType = {
  duration: number | null
  bitrate: number | null
  sampleRate: number | null
  channels: number | null
  year: number | null
  waveformPeaks: number[]
}

export type AudioMetadataMinAggregateOutputType = {
  attachmentId: string | null
  format: string | null
  duration: number | null
  bitrate: number | null
  sampleRate: number | null
  channels: number | null
  codec: string | null
  title: string | null
  artist: string | null
  album: string | null
  year: number | null
  genre: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AudioMetadataMaxAggregateOutputType = {
  attachmentId: string | null
  format: string | null
  duration: number | null
  bitrate: number | null
  sampleRate: number | null
  channels: number | null
  codec: string | null
  title: string | null
  artist: string | null
  album: string | null
  year: number | null
  genre: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AudioMetadataCountAggregateOutputType = {
  attachmentId: number
  format: number
  duration: number
  bitrate: number
  sampleRate: number
  channels: number
  codec: number
  title: number
  artist: number
  album: number
  year: number
  genre: number
  waveformPeaks: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AudioMetadataAvgAggregateInputType = {
  duration?: true
  bitrate?: true
  sampleRate?: true
  channels?: true
  year?: true
  waveformPeaks?: true
}

export type AudioMetadataSumAggregateInputType = {
  duration?: true
  bitrate?: true
  sampleRate?: true
  channels?: true
  year?: true
  waveformPeaks?: true
}

export type AudioMetadataMinAggregateInputType = {
  attachmentId?: true
  format?: true
  duration?: true
  bitrate?: true
  sampleRate?: true
  channels?: true
  codec?: true
  title?: true
  artist?: true
  album?: true
  year?: true
  genre?: true
  createdAt?: true
  updatedAt?: true
}

export type AudioMetadataMaxAggregateInputType = {
  attachmentId?: true
  format?: true
  duration?: true
  bitrate?: true
  sampleRate?: true
  channels?: true
  codec?: true
  title?: true
  artist?: true
  album?: true
  year?: true
  genre?: true
  createdAt?: true
  updatedAt?: true
}

export type AudioMetadataCountAggregateInputType = {
  attachmentId?: true
  format?: true
  duration?: true
  bitrate?: true
  sampleRate?: true
  channels?: true
  codec?: true
  title?: true
  artist?: true
  album?: true
  year?: true
  genre?: true
  waveformPeaks?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AudioMetadataAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AudioMetadata to aggregate.
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioMetadata to fetch.
   */
  orderBy?: Prisma.AudioMetadataOrderByWithRelationInput | Prisma.AudioMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AudioMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AudioMetadata
  **/
  _count?: true | AudioMetadataCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AudioMetadataAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AudioMetadataSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AudioMetadataMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AudioMetadataMaxAggregateInputType
}

export type GetAudioMetadataAggregateType<T extends AudioMetadataAggregateArgs> = {
      [P in keyof T & keyof AggregateAudioMetadata]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAudioMetadata[P]>
    : Prisma.GetScalarType<T[P], AggregateAudioMetadata[P]>
}




export type AudioMetadataGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AudioMetadataWhereInput
  orderBy?: Prisma.AudioMetadataOrderByWithAggregationInput | Prisma.AudioMetadataOrderByWithAggregationInput[]
  by: Prisma.AudioMetadataScalarFieldEnum[] | Prisma.AudioMetadataScalarFieldEnum
  having?: Prisma.AudioMetadataScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AudioMetadataCountAggregateInputType | true
  _avg?: AudioMetadataAvgAggregateInputType
  _sum?: AudioMetadataSumAggregateInputType
  _min?: AudioMetadataMinAggregateInputType
  _max?: AudioMetadataMaxAggregateInputType
}

export type AudioMetadataGroupByOutputType = {
  attachmentId: string
  format: string
  duration: number
  bitrate: number | null
  sampleRate: number | null
  channels: number | null
  codec: string | null
  title: string | null
  artist: string | null
  album: string | null
  year: number | null
  genre: string | null
  waveformPeaks: number[]
  createdAt: Date
  updatedAt: Date
  _count: AudioMetadataCountAggregateOutputType | null
  _avg: AudioMetadataAvgAggregateOutputType | null
  _sum: AudioMetadataSumAggregateOutputType | null
  _min: AudioMetadataMinAggregateOutputType | null
  _max: AudioMetadataMaxAggregateOutputType | null
}

type GetAudioMetadataGroupByPayload<T extends AudioMetadataGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AudioMetadataGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AudioMetadataGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AudioMetadataGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AudioMetadataGroupByOutputType[P]>
      }
    >
  >



export type AudioMetadataWhereInput = {
  AND?: Prisma.AudioMetadataWhereInput | Prisma.AudioMetadataWhereInput[]
  OR?: Prisma.AudioMetadataWhereInput[]
  NOT?: Prisma.AudioMetadataWhereInput | Prisma.AudioMetadataWhereInput[]
  attachmentId?: Prisma.StringFilter<"AudioMetadata"> | string
  format?: Prisma.StringFilter<"AudioMetadata"> | string
  duration?: Prisma.IntFilter<"AudioMetadata"> | number
  bitrate?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  sampleRate?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  channels?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  codec?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  title?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  artist?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  album?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  year?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  genre?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  waveformPeaks?: Prisma.IntNullableListFilter<"AudioMetadata">
  createdAt?: Prisma.DateTimeFilter<"AudioMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AudioMetadata"> | Date | string
  attachment?: Prisma.XOR<Prisma.AttachmentScalarRelationFilter, Prisma.AttachmentWhereInput>
}

export type AudioMetadataOrderByWithRelationInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrderInput | Prisma.SortOrder
  sampleRate?: Prisma.SortOrderInput | Prisma.SortOrder
  channels?: Prisma.SortOrderInput | Prisma.SortOrder
  codec?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  artist?: Prisma.SortOrderInput | Prisma.SortOrder
  album?: Prisma.SortOrderInput | Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  genre?: Prisma.SortOrderInput | Prisma.SortOrder
  waveformPeaks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  attachment?: Prisma.AttachmentOrderByWithRelationInput
}

export type AudioMetadataWhereUniqueInput = Prisma.AtLeast<{
  attachmentId?: string
  AND?: Prisma.AudioMetadataWhereInput | Prisma.AudioMetadataWhereInput[]
  OR?: Prisma.AudioMetadataWhereInput[]
  NOT?: Prisma.AudioMetadataWhereInput | Prisma.AudioMetadataWhereInput[]
  format?: Prisma.StringFilter<"AudioMetadata"> | string
  duration?: Prisma.IntFilter<"AudioMetadata"> | number
  bitrate?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  sampleRate?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  channels?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  codec?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  title?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  artist?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  album?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  year?: Prisma.IntNullableFilter<"AudioMetadata"> | number | null
  genre?: Prisma.StringNullableFilter<"AudioMetadata"> | string | null
  waveformPeaks?: Prisma.IntNullableListFilter<"AudioMetadata">
  createdAt?: Prisma.DateTimeFilter<"AudioMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AudioMetadata"> | Date | string
  attachment?: Prisma.XOR<Prisma.AttachmentScalarRelationFilter, Prisma.AttachmentWhereInput>
}, "attachmentId">

export type AudioMetadataOrderByWithAggregationInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrderInput | Prisma.SortOrder
  sampleRate?: Prisma.SortOrderInput | Prisma.SortOrder
  channels?: Prisma.SortOrderInput | Prisma.SortOrder
  codec?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  artist?: Prisma.SortOrderInput | Prisma.SortOrder
  album?: Prisma.SortOrderInput | Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  genre?: Prisma.SortOrderInput | Prisma.SortOrder
  waveformPeaks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AudioMetadataCountOrderByAggregateInput
  _avg?: Prisma.AudioMetadataAvgOrderByAggregateInput
  _max?: Prisma.AudioMetadataMaxOrderByAggregateInput
  _min?: Prisma.AudioMetadataMinOrderByAggregateInput
  _sum?: Prisma.AudioMetadataSumOrderByAggregateInput
}

export type AudioMetadataScalarWhereWithAggregatesInput = {
  AND?: Prisma.AudioMetadataScalarWhereWithAggregatesInput | Prisma.AudioMetadataScalarWhereWithAggregatesInput[]
  OR?: Prisma.AudioMetadataScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AudioMetadataScalarWhereWithAggregatesInput | Prisma.AudioMetadataScalarWhereWithAggregatesInput[]
  attachmentId?: Prisma.StringWithAggregatesFilter<"AudioMetadata"> | string
  format?: Prisma.StringWithAggregatesFilter<"AudioMetadata"> | string
  duration?: Prisma.IntWithAggregatesFilter<"AudioMetadata"> | number
  bitrate?: Prisma.IntNullableWithAggregatesFilter<"AudioMetadata"> | number | null
  sampleRate?: Prisma.IntNullableWithAggregatesFilter<"AudioMetadata"> | number | null
  channels?: Prisma.IntNullableWithAggregatesFilter<"AudioMetadata"> | number | null
  codec?: Prisma.StringNullableWithAggregatesFilter<"AudioMetadata"> | string | null
  title?: Prisma.StringNullableWithAggregatesFilter<"AudioMetadata"> | string | null
  artist?: Prisma.StringNullableWithAggregatesFilter<"AudioMetadata"> | string | null
  album?: Prisma.StringNullableWithAggregatesFilter<"AudioMetadata"> | string | null
  year?: Prisma.IntNullableWithAggregatesFilter<"AudioMetadata"> | number | null
  genre?: Prisma.StringNullableWithAggregatesFilter<"AudioMetadata"> | string | null
  waveformPeaks?: Prisma.IntNullableListFilter<"AudioMetadata">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AudioMetadata"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AudioMetadata"> | Date | string
}

export type AudioMetadataCreateInput = {
  format: string
  duration: number
  bitrate?: number | null
  sampleRate?: number | null
  channels?: number | null
  codec?: string | null
  title?: string | null
  artist?: string | null
  album?: string | null
  year?: number | null
  genre?: string | null
  waveformPeaks?: Prisma.AudioMetadataCreatewaveformPeaksInput | number[]
  createdAt?: Date | string
  updatedAt?: Date | string
  attachment: Prisma.AttachmentCreateNestedOneWithoutAudioInput
}

export type AudioMetadataUncheckedCreateInput = {
  attachmentId: string
  format: string
  duration: number
  bitrate?: number | null
  sampleRate?: number | null
  channels?: number | null
  codec?: string | null
  title?: string | null
  artist?: string | null
  album?: string | null
  year?: number | null
  genre?: string | null
  waveformPeaks?: Prisma.AudioMetadataCreatewaveformPeaksInput | number[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AudioMetadataUpdateInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  bitrate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sampleRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  channels?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  codec?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artist?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  genre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  waveformPeaks?: Prisma.AudioMetadataUpdatewaveformPeaksInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachment?: Prisma.AttachmentUpdateOneRequiredWithoutAudioNestedInput
}

export type AudioMetadataUncheckedUpdateInput = {
  attachmentId?: Prisma.StringFieldUpdateOperationsInput | string
  format?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  bitrate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sampleRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  channels?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  codec?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artist?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  genre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  waveformPeaks?: Prisma.AudioMetadataUpdatewaveformPeaksInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AudioMetadataCreateManyInput = {
  attachmentId: string
  format: string
  duration: number
  bitrate?: number | null
  sampleRate?: number | null
  channels?: number | null
  codec?: string | null
  title?: string | null
  artist?: string | null
  album?: string | null
  year?: number | null
  genre?: string | null
  waveformPeaks?: Prisma.AudioMetadataCreatewaveformPeaksInput | number[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AudioMetadataUpdateManyMutationInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  bitrate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sampleRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  channels?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  codec?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artist?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  genre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  waveformPeaks?: Prisma.AudioMetadataUpdatewaveformPeaksInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AudioMetadataUncheckedUpdateManyInput = {
  attachmentId?: Prisma.StringFieldUpdateOperationsInput | string
  format?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  bitrate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sampleRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  channels?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  codec?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artist?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  genre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  waveformPeaks?: Prisma.AudioMetadataUpdatewaveformPeaksInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AudioMetadataNullableScalarRelationFilter = {
  is?: Prisma.AudioMetadataWhereInput | null
  isNot?: Prisma.AudioMetadataWhereInput | null
}

export type AudioMetadataCountOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrder
  sampleRate?: Prisma.SortOrder
  channels?: Prisma.SortOrder
  codec?: Prisma.SortOrder
  title?: Prisma.SortOrder
  artist?: Prisma.SortOrder
  album?: Prisma.SortOrder
  year?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  waveformPeaks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AudioMetadataAvgOrderByAggregateInput = {
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrder
  sampleRate?: Prisma.SortOrder
  channels?: Prisma.SortOrder
  year?: Prisma.SortOrder
  waveformPeaks?: Prisma.SortOrder
}

export type AudioMetadataMaxOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrder
  sampleRate?: Prisma.SortOrder
  channels?: Prisma.SortOrder
  codec?: Prisma.SortOrder
  title?: Prisma.SortOrder
  artist?: Prisma.SortOrder
  album?: Prisma.SortOrder
  year?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AudioMetadataMinOrderByAggregateInput = {
  attachmentId?: Prisma.SortOrder
  format?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrder
  sampleRate?: Prisma.SortOrder
  channels?: Prisma.SortOrder
  codec?: Prisma.SortOrder
  title?: Prisma.SortOrder
  artist?: Prisma.SortOrder
  album?: Prisma.SortOrder
  year?: Prisma.SortOrder
  genre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AudioMetadataSumOrderByAggregateInput = {
  duration?: Prisma.SortOrder
  bitrate?: Prisma.SortOrder
  sampleRate?: Prisma.SortOrder
  channels?: Prisma.SortOrder
  year?: Prisma.SortOrder
  waveformPeaks?: Prisma.SortOrder
}

export type AudioMetadataCreateNestedOneWithoutAttachmentInput = {
  create?: Prisma.XOR<Prisma.AudioMetadataCreateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.AudioMetadataCreateOrConnectWithoutAttachmentInput
  connect?: Prisma.AudioMetadataWhereUniqueInput
}

export type AudioMetadataUncheckedCreateNestedOneWithoutAttachmentInput = {
  create?: Prisma.XOR<Prisma.AudioMetadataCreateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.AudioMetadataCreateOrConnectWithoutAttachmentInput
  connect?: Prisma.AudioMetadataWhereUniqueInput
}

export type AudioMetadataUpdateOneWithoutAttachmentNestedInput = {
  create?: Prisma.XOR<Prisma.AudioMetadataCreateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.AudioMetadataCreateOrConnectWithoutAttachmentInput
  upsert?: Prisma.AudioMetadataUpsertWithoutAttachmentInput
  disconnect?: Prisma.AudioMetadataWhereInput | boolean
  delete?: Prisma.AudioMetadataWhereInput | boolean
  connect?: Prisma.AudioMetadataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AudioMetadataUpdateToOneWithWhereWithoutAttachmentInput, Prisma.AudioMetadataUpdateWithoutAttachmentInput>, Prisma.AudioMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type AudioMetadataUncheckedUpdateOneWithoutAttachmentNestedInput = {
  create?: Prisma.XOR<Prisma.AudioMetadataCreateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedCreateWithoutAttachmentInput>
  connectOrCreate?: Prisma.AudioMetadataCreateOrConnectWithoutAttachmentInput
  upsert?: Prisma.AudioMetadataUpsertWithoutAttachmentInput
  disconnect?: Prisma.AudioMetadataWhereInput | boolean
  delete?: Prisma.AudioMetadataWhereInput | boolean
  connect?: Prisma.AudioMetadataWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AudioMetadataUpdateToOneWithWhereWithoutAttachmentInput, Prisma.AudioMetadataUpdateWithoutAttachmentInput>, Prisma.AudioMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type AudioMetadataCreatewaveformPeaksInput = {
  set: number[]
}

export type AudioMetadataUpdatewaveformPeaksInput = {
  set?: number[]
  push?: number | number[]
}

export type AudioMetadataCreateWithoutAttachmentInput = {
  format: string
  duration: number
  bitrate?: number | null
  sampleRate?: number | null
  channels?: number | null
  codec?: string | null
  title?: string | null
  artist?: string | null
  album?: string | null
  year?: number | null
  genre?: string | null
  waveformPeaks?: Prisma.AudioMetadataCreatewaveformPeaksInput | number[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AudioMetadataUncheckedCreateWithoutAttachmentInput = {
  format: string
  duration: number
  bitrate?: number | null
  sampleRate?: number | null
  channels?: number | null
  codec?: string | null
  title?: string | null
  artist?: string | null
  album?: string | null
  year?: number | null
  genre?: string | null
  waveformPeaks?: Prisma.AudioMetadataCreatewaveformPeaksInput | number[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AudioMetadataCreateOrConnectWithoutAttachmentInput = {
  where: Prisma.AudioMetadataWhereUniqueInput
  create: Prisma.XOR<Prisma.AudioMetadataCreateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedCreateWithoutAttachmentInput>
}

export type AudioMetadataUpsertWithoutAttachmentInput = {
  update: Prisma.XOR<Prisma.AudioMetadataUpdateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedUpdateWithoutAttachmentInput>
  create: Prisma.XOR<Prisma.AudioMetadataCreateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedCreateWithoutAttachmentInput>
  where?: Prisma.AudioMetadataWhereInput
}

export type AudioMetadataUpdateToOneWithWhereWithoutAttachmentInput = {
  where?: Prisma.AudioMetadataWhereInput
  data: Prisma.XOR<Prisma.AudioMetadataUpdateWithoutAttachmentInput, Prisma.AudioMetadataUncheckedUpdateWithoutAttachmentInput>
}

export type AudioMetadataUpdateWithoutAttachmentInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  bitrate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sampleRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  channels?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  codec?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artist?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  genre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  waveformPeaks?: Prisma.AudioMetadataUpdatewaveformPeaksInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AudioMetadataUncheckedUpdateWithoutAttachmentInput = {
  format?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  bitrate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sampleRate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  channels?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  codec?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artist?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  album?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  genre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  waveformPeaks?: Prisma.AudioMetadataUpdatewaveformPeaksInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AudioMetadataSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  duration?: boolean
  bitrate?: boolean
  sampleRate?: boolean
  channels?: boolean
  codec?: boolean
  title?: boolean
  artist?: boolean
  album?: boolean
  year?: boolean
  genre?: boolean
  waveformPeaks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["audioMetadata"]>

export type AudioMetadataSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  duration?: boolean
  bitrate?: boolean
  sampleRate?: boolean
  channels?: boolean
  codec?: boolean
  title?: boolean
  artist?: boolean
  album?: boolean
  year?: boolean
  genre?: boolean
  waveformPeaks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["audioMetadata"]>

export type AudioMetadataSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attachmentId?: boolean
  format?: boolean
  duration?: boolean
  bitrate?: boolean
  sampleRate?: boolean
  channels?: boolean
  codec?: boolean
  title?: boolean
  artist?: boolean
  album?: boolean
  year?: boolean
  genre?: boolean
  waveformPeaks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["audioMetadata"]>

export type AudioMetadataSelectScalar = {
  attachmentId?: boolean
  format?: boolean
  duration?: boolean
  bitrate?: boolean
  sampleRate?: boolean
  channels?: boolean
  codec?: boolean
  title?: boolean
  artist?: boolean
  album?: boolean
  year?: boolean
  genre?: boolean
  waveformPeaks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AudioMetadataOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"attachmentId" | "format" | "duration" | "bitrate" | "sampleRate" | "channels" | "codec" | "title" | "artist" | "album" | "year" | "genre" | "waveformPeaks" | "createdAt" | "updatedAt", ExtArgs["result"]["audioMetadata"]>
export type AudioMetadataInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}
export type AudioMetadataIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}
export type AudioMetadataIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attachment?: boolean | Prisma.AttachmentDefaultArgs<ExtArgs>
}

export type $AudioMetadataPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AudioMetadata"
  objects: {
    attachment: Prisma.$AttachmentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    attachmentId: string
    format: string
    duration: number
    bitrate: number | null
    sampleRate: number | null
    channels: number | null
    codec: string | null
    title: string | null
    artist: string | null
    album: string | null
    year: number | null
    genre: string | null
    waveformPeaks: number[]
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["audioMetadata"]>
  composites: {}
}

export type AudioMetadataGetPayload<S extends boolean | null | undefined | AudioMetadataDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload, S>

export type AudioMetadataCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AudioMetadataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AudioMetadataCountAggregateInputType | true
  }

export interface AudioMetadataDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AudioMetadata'], meta: { name: 'AudioMetadata' } }
  /**
   * Find zero or one AudioMetadata that matches the filter.
   * @param {AudioMetadataFindUniqueArgs} args - Arguments to find a AudioMetadata
   * @example
   * // Get one AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AudioMetadataFindUniqueArgs>(args: Prisma.SelectSubset<T, AudioMetadataFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AudioMetadata that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AudioMetadataFindUniqueOrThrowArgs} args - Arguments to find a AudioMetadata
   * @example
   * // Get one AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AudioMetadataFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AudioMetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AudioMetadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataFindFirstArgs} args - Arguments to find a AudioMetadata
   * @example
   * // Get one AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AudioMetadataFindFirstArgs>(args?: Prisma.SelectSubset<T, AudioMetadataFindFirstArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AudioMetadata that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataFindFirstOrThrowArgs} args - Arguments to find a AudioMetadata
   * @example
   * // Get one AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AudioMetadataFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AudioMetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AudioMetadata that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.findMany()
   * 
   * // Get first 10 AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.findMany({ take: 10 })
   * 
   * // Only select the `attachmentId`
   * const audioMetadataWithAttachmentIdOnly = await prisma.audioMetadata.findMany({ select: { attachmentId: true } })
   * 
   */
  findMany<T extends AudioMetadataFindManyArgs>(args?: Prisma.SelectSubset<T, AudioMetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AudioMetadata.
   * @param {AudioMetadataCreateArgs} args - Arguments to create a AudioMetadata.
   * @example
   * // Create one AudioMetadata
   * const AudioMetadata = await prisma.audioMetadata.create({
   *   data: {
   *     // ... data to create a AudioMetadata
   *   }
   * })
   * 
   */
  create<T extends AudioMetadataCreateArgs>(args: Prisma.SelectSubset<T, AudioMetadataCreateArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AudioMetadata.
   * @param {AudioMetadataCreateManyArgs} args - Arguments to create many AudioMetadata.
   * @example
   * // Create many AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AudioMetadataCreateManyArgs>(args?: Prisma.SelectSubset<T, AudioMetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AudioMetadata and returns the data saved in the database.
   * @param {AudioMetadataCreateManyAndReturnArgs} args - Arguments to create many AudioMetadata.
   * @example
   * // Create many AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AudioMetadata and only return the `attachmentId`
   * const audioMetadataWithAttachmentIdOnly = await prisma.audioMetadata.createManyAndReturn({
   *   select: { attachmentId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AudioMetadataCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AudioMetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AudioMetadata.
   * @param {AudioMetadataDeleteArgs} args - Arguments to delete one AudioMetadata.
   * @example
   * // Delete one AudioMetadata
   * const AudioMetadata = await prisma.audioMetadata.delete({
   *   where: {
   *     // ... filter to delete one AudioMetadata
   *   }
   * })
   * 
   */
  delete<T extends AudioMetadataDeleteArgs>(args: Prisma.SelectSubset<T, AudioMetadataDeleteArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AudioMetadata.
   * @param {AudioMetadataUpdateArgs} args - Arguments to update one AudioMetadata.
   * @example
   * // Update one AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AudioMetadataUpdateArgs>(args: Prisma.SelectSubset<T, AudioMetadataUpdateArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AudioMetadata.
   * @param {AudioMetadataDeleteManyArgs} args - Arguments to filter AudioMetadata to delete.
   * @example
   * // Delete a few AudioMetadata
   * const { count } = await prisma.audioMetadata.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AudioMetadataDeleteManyArgs>(args?: Prisma.SelectSubset<T, AudioMetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AudioMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AudioMetadataUpdateManyArgs>(args: Prisma.SelectSubset<T, AudioMetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AudioMetadata and returns the data updated in the database.
   * @param {AudioMetadataUpdateManyAndReturnArgs} args - Arguments to update many AudioMetadata.
   * @example
   * // Update many AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AudioMetadata and only return the `attachmentId`
   * const audioMetadataWithAttachmentIdOnly = await prisma.audioMetadata.updateManyAndReturn({
   *   select: { attachmentId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AudioMetadataUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AudioMetadataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AudioMetadata.
   * @param {AudioMetadataUpsertArgs} args - Arguments to update or create a AudioMetadata.
   * @example
   * // Update or create a AudioMetadata
   * const audioMetadata = await prisma.audioMetadata.upsert({
   *   create: {
   *     // ... data to create a AudioMetadata
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AudioMetadata we want to update
   *   }
   * })
   */
  upsert<T extends AudioMetadataUpsertArgs>(args: Prisma.SelectSubset<T, AudioMetadataUpsertArgs<ExtArgs>>): Prisma.Prisma__AudioMetadataClient<runtime.Types.Result.GetResult<Prisma.$AudioMetadataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AudioMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataCountArgs} args - Arguments to filter AudioMetadata to count.
   * @example
   * // Count the number of AudioMetadata
   * const count = await prisma.audioMetadata.count({
   *   where: {
   *     // ... the filter for the AudioMetadata we want to count
   *   }
   * })
  **/
  count<T extends AudioMetadataCountArgs>(
    args?: Prisma.Subset<T, AudioMetadataCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AudioMetadataCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AudioMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AudioMetadataAggregateArgs>(args: Prisma.Subset<T, AudioMetadataAggregateArgs>): Prisma.PrismaPromise<GetAudioMetadataAggregateType<T>>

  /**
   * Group by AudioMetadata.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioMetadataGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AudioMetadataGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AudioMetadataGroupByArgs['orderBy'] }
      : { orderBy?: AudioMetadataGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AudioMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudioMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AudioMetadata model
 */
readonly fields: AudioMetadataFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AudioMetadata.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AudioMetadataClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  attachment<T extends Prisma.AttachmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AttachmentDefaultArgs<ExtArgs>>): Prisma.Prisma__AttachmentClient<runtime.Types.Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AudioMetadata model
 */
export interface AudioMetadataFieldRefs {
  readonly attachmentId: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly format: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly duration: Prisma.FieldRef<"AudioMetadata", 'Int'>
  readonly bitrate: Prisma.FieldRef<"AudioMetadata", 'Int'>
  readonly sampleRate: Prisma.FieldRef<"AudioMetadata", 'Int'>
  readonly channels: Prisma.FieldRef<"AudioMetadata", 'Int'>
  readonly codec: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly title: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly artist: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly album: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly year: Prisma.FieldRef<"AudioMetadata", 'Int'>
  readonly genre: Prisma.FieldRef<"AudioMetadata", 'String'>
  readonly waveformPeaks: Prisma.FieldRef<"AudioMetadata", 'Int[]'>
  readonly createdAt: Prisma.FieldRef<"AudioMetadata", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AudioMetadata", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AudioMetadata findUnique
 */
export type AudioMetadataFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * Filter, which AudioMetadata to fetch.
   */
  where: Prisma.AudioMetadataWhereUniqueInput
}

/**
 * AudioMetadata findUniqueOrThrow
 */
export type AudioMetadataFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * Filter, which AudioMetadata to fetch.
   */
  where: Prisma.AudioMetadataWhereUniqueInput
}

/**
 * AudioMetadata findFirst
 */
export type AudioMetadataFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * Filter, which AudioMetadata to fetch.
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioMetadata to fetch.
   */
  orderBy?: Prisma.AudioMetadataOrderByWithRelationInput | Prisma.AudioMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AudioMetadata.
   */
  cursor?: Prisma.AudioMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AudioMetadata.
   */
  distinct?: Prisma.AudioMetadataScalarFieldEnum | Prisma.AudioMetadataScalarFieldEnum[]
}

/**
 * AudioMetadata findFirstOrThrow
 */
export type AudioMetadataFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * Filter, which AudioMetadata to fetch.
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioMetadata to fetch.
   */
  orderBy?: Prisma.AudioMetadataOrderByWithRelationInput | Prisma.AudioMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AudioMetadata.
   */
  cursor?: Prisma.AudioMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioMetadata.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AudioMetadata.
   */
  distinct?: Prisma.AudioMetadataScalarFieldEnum | Prisma.AudioMetadataScalarFieldEnum[]
}

/**
 * AudioMetadata findMany
 */
export type AudioMetadataFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * Filter, which AudioMetadata to fetch.
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioMetadata to fetch.
   */
  orderBy?: Prisma.AudioMetadataOrderByWithRelationInput | Prisma.AudioMetadataOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AudioMetadata.
   */
  cursor?: Prisma.AudioMetadataWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioMetadata from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioMetadata.
   */
  skip?: number
  distinct?: Prisma.AudioMetadataScalarFieldEnum | Prisma.AudioMetadataScalarFieldEnum[]
}

/**
 * AudioMetadata create
 */
export type AudioMetadataCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * The data needed to create a AudioMetadata.
   */
  data: Prisma.XOR<Prisma.AudioMetadataCreateInput, Prisma.AudioMetadataUncheckedCreateInput>
}

/**
 * AudioMetadata createMany
 */
export type AudioMetadataCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AudioMetadata.
   */
  data: Prisma.AudioMetadataCreateManyInput | Prisma.AudioMetadataCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AudioMetadata createManyAndReturn
 */
export type AudioMetadataCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * The data used to create many AudioMetadata.
   */
  data: Prisma.AudioMetadataCreateManyInput | Prisma.AudioMetadataCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AudioMetadata update
 */
export type AudioMetadataUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * The data needed to update a AudioMetadata.
   */
  data: Prisma.XOR<Prisma.AudioMetadataUpdateInput, Prisma.AudioMetadataUncheckedUpdateInput>
  /**
   * Choose, which AudioMetadata to update.
   */
  where: Prisma.AudioMetadataWhereUniqueInput
}

/**
 * AudioMetadata updateMany
 */
export type AudioMetadataUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AudioMetadata.
   */
  data: Prisma.XOR<Prisma.AudioMetadataUpdateManyMutationInput, Prisma.AudioMetadataUncheckedUpdateManyInput>
  /**
   * Filter which AudioMetadata to update
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * Limit how many AudioMetadata to update.
   */
  limit?: number
}

/**
 * AudioMetadata updateManyAndReturn
 */
export type AudioMetadataUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * The data used to update AudioMetadata.
   */
  data: Prisma.XOR<Prisma.AudioMetadataUpdateManyMutationInput, Prisma.AudioMetadataUncheckedUpdateManyInput>
  /**
   * Filter which AudioMetadata to update
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * Limit how many AudioMetadata to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AudioMetadata upsert
 */
export type AudioMetadataUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * The filter to search for the AudioMetadata to update in case it exists.
   */
  where: Prisma.AudioMetadataWhereUniqueInput
  /**
   * In case the AudioMetadata found by the `where` argument doesn't exist, create a new AudioMetadata with this data.
   */
  create: Prisma.XOR<Prisma.AudioMetadataCreateInput, Prisma.AudioMetadataUncheckedCreateInput>
  /**
   * In case the AudioMetadata was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AudioMetadataUpdateInput, Prisma.AudioMetadataUncheckedUpdateInput>
}

/**
 * AudioMetadata delete
 */
export type AudioMetadataDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
  /**
   * Filter which AudioMetadata to delete.
   */
  where: Prisma.AudioMetadataWhereUniqueInput
}

/**
 * AudioMetadata deleteMany
 */
export type AudioMetadataDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AudioMetadata to delete
   */
  where?: Prisma.AudioMetadataWhereInput
  /**
   * Limit how many AudioMetadata to delete.
   */
  limit?: number
}

/**
 * AudioMetadata without action
 */
export type AudioMetadataDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioMetadata
   */
  select?: Prisma.AudioMetadataSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioMetadata
   */
  omit?: Prisma.AudioMetadataOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AudioMetadataInclude<ExtArgs> | null
}
