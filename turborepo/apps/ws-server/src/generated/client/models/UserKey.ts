
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserKey` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserKey
 * 
 */
export type UserKeyModel = runtime.Types.Result.DefaultSelection<Prisma.$UserKeyPayload>

export type AggregateUserKey = {
  _count: UserKeyCountAggregateOutputType | null
  _min: UserKeyMinAggregateOutputType | null
  _max: UserKeyMaxAggregateOutputType | null
}

export type UserKeyMinAggregateOutputType = {
  id: string | null
  userId: string | null
  provider: $Enums.Provider | null
  apiKey: string | null
  label: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserKeyMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  provider: $Enums.Provider | null
  apiKey: string | null
  label: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserKeyCountAggregateOutputType = {
  id: number
  userId: number
  provider: number
  apiKey: number
  label: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserKeyMinAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  apiKey?: true
  label?: true
  createdAt?: true
  updatedAt?: true
}

export type UserKeyMaxAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  apiKey?: true
  label?: true
  createdAt?: true
  updatedAt?: true
}

export type UserKeyCountAggregateInputType = {
  id?: true
  userId?: true
  provider?: true
  apiKey?: true
  label?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserKeyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserKey to aggregate.
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserKeys to fetch.
   */
  orderBy?: Prisma.UserKeyOrderByWithRelationInput | Prisma.UserKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserKeys
  **/
  _count?: true | UserKeyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserKeyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserKeyMaxAggregateInputType
}

export type GetUserKeyAggregateType<T extends UserKeyAggregateArgs> = {
      [P in keyof T & keyof AggregateUserKey]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserKey[P]>
    : Prisma.GetScalarType<T[P], AggregateUserKey[P]>
}




export type UserKeyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserKeyWhereInput
  orderBy?: Prisma.UserKeyOrderByWithAggregationInput | Prisma.UserKeyOrderByWithAggregationInput[]
  by: Prisma.UserKeyScalarFieldEnum[] | Prisma.UserKeyScalarFieldEnum
  having?: Prisma.UserKeyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserKeyCountAggregateInputType | true
  _min?: UserKeyMinAggregateInputType
  _max?: UserKeyMaxAggregateInputType
}

export type UserKeyGroupByOutputType = {
  id: string
  userId: string
  provider: $Enums.Provider
  apiKey: string
  label: string | null
  createdAt: Date
  updatedAt: Date
  _count: UserKeyCountAggregateOutputType | null
  _min: UserKeyMinAggregateOutputType | null
  _max: UserKeyMaxAggregateOutputType | null
}

type GetUserKeyGroupByPayload<T extends UserKeyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserKeyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserKeyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserKeyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserKeyGroupByOutputType[P]>
      }
    >
  > 



export type UserKeyWhereInput = {
  AND?: Prisma.UserKeyWhereInput | Prisma.UserKeyWhereInput[]
  OR?: Prisma.UserKeyWhereInput[]
  NOT?: Prisma.UserKeyWhereInput | Prisma.UserKeyWhereInput[]
  id?: Prisma.StringFilter<"UserKey"> | string
  userId?: Prisma.StringFilter<"UserKey"> | string
  provider?: Prisma.EnumProviderFilter<"UserKey"> | $Enums.Provider
  apiKey?: Prisma.StringFilter<"UserKey"> | string
  label?: Prisma.StringNullableFilter<"UserKey"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UserKey"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserKey"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  messages?: Prisma.MessageListRelationFilter
}

export type UserKeyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  label?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  messages?: Prisma.MessageOrderByRelationAggregateInput
}

export type UserKeyWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_provider?: Prisma.UserKeyUserIdProviderCompoundUniqueInput
  AND?: Prisma.UserKeyWhereInput | Prisma.UserKeyWhereInput[]
  OR?: Prisma.UserKeyWhereInput[]
  NOT?: Prisma.UserKeyWhereInput | Prisma.UserKeyWhereInput[]
  userId?: Prisma.StringFilter<"UserKey"> | string
  provider?: Prisma.EnumProviderFilter<"UserKey"> | $Enums.Provider
  apiKey?: Prisma.StringFilter<"UserKey"> | string
  label?: Prisma.StringNullableFilter<"UserKey"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UserKey"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserKey"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  messages?: Prisma.MessageListRelationFilter
}, "id" | "userId_provider">

export type UserKeyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  label?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserKeyCountOrderByAggregateInput
  _max?: Prisma.UserKeyMaxOrderByAggregateInput
  _min?: Prisma.UserKeyMinOrderByAggregateInput
}

export type UserKeyScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserKeyScalarWhereWithAggregatesInput | Prisma.UserKeyScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserKeyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserKeyScalarWhereWithAggregatesInput | Prisma.UserKeyScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserKey"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserKey"> | string
  provider?: Prisma.EnumProviderWithAggregatesFilter<"UserKey"> | $Enums.Provider
  apiKey?: Prisma.StringWithAggregatesFilter<"UserKey"> | string
  label?: Prisma.StringNullableWithAggregatesFilter<"UserKey"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserKey"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserKey"> | Date | string
}

export type UserKeyCreateInput = {
  id?: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutKeysInput
  messages?: Prisma.MessageCreateNestedManyWithoutUserKeyInput
}

export type UserKeyUncheckedCreateInput = {
  id?: string
  userId: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutUserKeyInput
}

export type UserKeyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutKeysNestedInput
  messages?: Prisma.MessageUpdateManyWithoutUserKeyNestedInput
}

export type UserKeyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.MessageUncheckedUpdateManyWithoutUserKeyNestedInput
}

export type UserKeyCreateManyInput = {
  id?: string
  userId: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserKeyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserKeyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserKeyListRelationFilter = {
  every?: Prisma.UserKeyWhereInput
  some?: Prisma.UserKeyWhereInput
  none?: Prisma.UserKeyWhereInput
}

export type UserKeyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserKeyUserIdProviderCompoundUniqueInput = {
  userId: string
  provider: $Enums.Provider
}

export type UserKeyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserKeyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserKeyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserKeyNullableScalarRelationFilter = {
  is?: Prisma.UserKeyWhereInput | null
  isNot?: Prisma.UserKeyWhereInput | null
}

export type UserKeyCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserKeyCreateWithoutUserInput, Prisma.UserKeyUncheckedCreateWithoutUserInput> | Prisma.UserKeyCreateWithoutUserInput[] | Prisma.UserKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserKeyCreateOrConnectWithoutUserInput | Prisma.UserKeyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserKeyCreateManyUserInputEnvelope
  connect?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
}

export type UserKeyUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserKeyCreateWithoutUserInput, Prisma.UserKeyUncheckedCreateWithoutUserInput> | Prisma.UserKeyCreateWithoutUserInput[] | Prisma.UserKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserKeyCreateOrConnectWithoutUserInput | Prisma.UserKeyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserKeyCreateManyUserInputEnvelope
  connect?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
}

export type UserKeyUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserKeyCreateWithoutUserInput, Prisma.UserKeyUncheckedCreateWithoutUserInput> | Prisma.UserKeyCreateWithoutUserInput[] | Prisma.UserKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserKeyCreateOrConnectWithoutUserInput | Prisma.UserKeyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserKeyUpsertWithWhereUniqueWithoutUserInput | Prisma.UserKeyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserKeyCreateManyUserInputEnvelope
  set?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  disconnect?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  delete?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  connect?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  update?: Prisma.UserKeyUpdateWithWhereUniqueWithoutUserInput | Prisma.UserKeyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserKeyUpdateManyWithWhereWithoutUserInput | Prisma.UserKeyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserKeyScalarWhereInput | Prisma.UserKeyScalarWhereInput[]
}

export type UserKeyUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserKeyCreateWithoutUserInput, Prisma.UserKeyUncheckedCreateWithoutUserInput> | Prisma.UserKeyCreateWithoutUserInput[] | Prisma.UserKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserKeyCreateOrConnectWithoutUserInput | Prisma.UserKeyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserKeyUpsertWithWhereUniqueWithoutUserInput | Prisma.UserKeyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserKeyCreateManyUserInputEnvelope
  set?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  disconnect?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  delete?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  connect?: Prisma.UserKeyWhereUniqueInput | Prisma.UserKeyWhereUniqueInput[]
  update?: Prisma.UserKeyUpdateWithWhereUniqueWithoutUserInput | Prisma.UserKeyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserKeyUpdateManyWithWhereWithoutUserInput | Prisma.UserKeyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserKeyScalarWhereInput | Prisma.UserKeyScalarWhereInput[]
}

export type EnumProviderFieldUpdateOperationsInput = {
  set?: $Enums.Provider
}

export type UserKeyCreateNestedOneWithoutMessagesInput = {
  create?: Prisma.XOR<Prisma.UserKeyCreateWithoutMessagesInput, Prisma.UserKeyUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.UserKeyCreateOrConnectWithoutMessagesInput
  connect?: Prisma.UserKeyWhereUniqueInput
}

export type UserKeyUpdateOneWithoutMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.UserKeyCreateWithoutMessagesInput, Prisma.UserKeyUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.UserKeyCreateOrConnectWithoutMessagesInput
  upsert?: Prisma.UserKeyUpsertWithoutMessagesInput
  disconnect?: Prisma.UserKeyWhereInput | boolean
  delete?: Prisma.UserKeyWhereInput | boolean
  connect?: Prisma.UserKeyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserKeyUpdateToOneWithWhereWithoutMessagesInput, Prisma.UserKeyUpdateWithoutMessagesInput>, Prisma.UserKeyUncheckedUpdateWithoutMessagesInput>
}

export type UserKeyCreateWithoutUserInput = {
  id?: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.MessageCreateNestedManyWithoutUserKeyInput
}

export type UserKeyUncheckedCreateWithoutUserInput = {
  id?: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutUserKeyInput
}

export type UserKeyCreateOrConnectWithoutUserInput = {
  where: Prisma.UserKeyWhereUniqueInput
  create: Prisma.XOR<Prisma.UserKeyCreateWithoutUserInput, Prisma.UserKeyUncheckedCreateWithoutUserInput>
}

export type UserKeyCreateManyUserInputEnvelope = {
  data: Prisma.UserKeyCreateManyUserInput | Prisma.UserKeyCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserKeyUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserKeyWhereUniqueInput
  update: Prisma.XOR<Prisma.UserKeyUpdateWithoutUserInput, Prisma.UserKeyUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserKeyCreateWithoutUserInput, Prisma.UserKeyUncheckedCreateWithoutUserInput>
}

export type UserKeyUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserKeyWhereUniqueInput
  data: Prisma.XOR<Prisma.UserKeyUpdateWithoutUserInput, Prisma.UserKeyUncheckedUpdateWithoutUserInput>
}

export type UserKeyUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserKeyScalarWhereInput
  data: Prisma.XOR<Prisma.UserKeyUpdateManyMutationInput, Prisma.UserKeyUncheckedUpdateManyWithoutUserInput>
}

export type UserKeyScalarWhereInput = {
  AND?: Prisma.UserKeyScalarWhereInput | Prisma.UserKeyScalarWhereInput[]
  OR?: Prisma.UserKeyScalarWhereInput[]
  NOT?: Prisma.UserKeyScalarWhereInput | Prisma.UserKeyScalarWhereInput[]
  id?: Prisma.StringFilter<"UserKey"> | string
  userId?: Prisma.StringFilter<"UserKey"> | string
  provider?: Prisma.EnumProviderFilter<"UserKey"> | $Enums.Provider
  apiKey?: Prisma.StringFilter<"UserKey"> | string
  label?: Prisma.StringNullableFilter<"UserKey"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UserKey"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserKey"> | Date | string
}

export type UserKeyCreateWithoutMessagesInput = {
  id?: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutKeysInput
}

export type UserKeyUncheckedCreateWithoutMessagesInput = {
  id?: string
  userId: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserKeyCreateOrConnectWithoutMessagesInput = {
  where: Prisma.UserKeyWhereUniqueInput
  create: Prisma.XOR<Prisma.UserKeyCreateWithoutMessagesInput, Prisma.UserKeyUncheckedCreateWithoutMessagesInput>
}

export type UserKeyUpsertWithoutMessagesInput = {
  update: Prisma.XOR<Prisma.UserKeyUpdateWithoutMessagesInput, Prisma.UserKeyUncheckedUpdateWithoutMessagesInput>
  create: Prisma.XOR<Prisma.UserKeyCreateWithoutMessagesInput, Prisma.UserKeyUncheckedCreateWithoutMessagesInput>
  where?: Prisma.UserKeyWhereInput
}

export type UserKeyUpdateToOneWithWhereWithoutMessagesInput = {
  where?: Prisma.UserKeyWhereInput
  data: Prisma.XOR<Prisma.UserKeyUpdateWithoutMessagesInput, Prisma.UserKeyUncheckedUpdateWithoutMessagesInput>
}

export type UserKeyUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutKeysNestedInput
}

export type UserKeyUncheckedUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserKeyCreateManyUserInput = {
  id?: string
  provider: $Enums.Provider
  apiKey: string
  label?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserKeyUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.MessageUpdateManyWithoutUserKeyNestedInput
}

export type UserKeyUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.MessageUncheckedUpdateManyWithoutUserKeyNestedInput
}

export type UserKeyUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumProviderFieldUpdateOperationsInput | $Enums.Provider
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type UserKeyCountOutputType
 */

export type UserKeyCountOutputType = {
  messages: number
}

export type UserKeyCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  messages?: boolean | UserKeyCountOutputTypeCountMessagesArgs
}

/**
 * UserKeyCountOutputType without action
 */
export type UserKeyCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKeyCountOutputType
   */
  select?: Prisma.UserKeyCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserKeyCountOutputType without action
 */
export type UserKeyCountOutputTypeCountMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageWhereInput
}


export type UserKeySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  apiKey?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  messages?: boolean | Prisma.UserKey$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.UserKeyCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userKey"]>

export type UserKeySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  apiKey?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userKey"]>

export type UserKeySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  provider?: boolean
  apiKey?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userKey"]>

export type UserKeySelectScalar = {
  id?: boolean
  userId?: boolean
  provider?: boolean
  apiKey?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserKeyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "provider" | "apiKey" | "label" | "createdAt" | "updatedAt", ExtArgs["result"]["userKey"]>
export type UserKeyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  messages?: boolean | Prisma.UserKey$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.UserKeyCountOutputTypeDefaultArgs<ExtArgs>
}
export type UserKeyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserKeyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserKeyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserKey"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    messages: Prisma.$MessagePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    provider: $Enums.Provider
    apiKey: string
    label: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userKey"]>
  composites: {}
}

export type UserKeyGetPayload<S extends boolean | null | undefined | UserKeyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserKeyPayload, S>

export type UserKeyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserKeyCountAggregateInputType | true
  }

export interface UserKeyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserKey'], meta: { name: 'UserKey' } }
  /**
   * Find zero or one UserKey that matches the filter.
   * @param {UserKeyFindUniqueArgs} args - Arguments to find a UserKey
   * @example
   * // Get one UserKey
   * const userKey = await prisma.userKey.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserKeyFindUniqueArgs>(args: Prisma.SelectSubset<T, UserKeyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserKey that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserKeyFindUniqueOrThrowArgs} args - Arguments to find a UserKey
   * @example
   * // Get one UserKey
   * const userKey = await prisma.userKey.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserKeyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserKey that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyFindFirstArgs} args - Arguments to find a UserKey
   * @example
   * // Get one UserKey
   * const userKey = await prisma.userKey.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserKeyFindFirstArgs>(args?: Prisma.SelectSubset<T, UserKeyFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserKey that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyFindFirstOrThrowArgs} args - Arguments to find a UserKey
   * @example
   * // Get one UserKey
   * const userKey = await prisma.userKey.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserKeyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserKeys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserKeys
   * const userKeys = await prisma.userKey.findMany()
   * 
   * // Get first 10 UserKeys
   * const userKeys = await prisma.userKey.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userKeyWithIdOnly = await prisma.userKey.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserKeyFindManyArgs>(args?: Prisma.SelectSubset<T, UserKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserKey.
   * @param {UserKeyCreateArgs} args - Arguments to create a UserKey.
   * @example
   * // Create one UserKey
   * const UserKey = await prisma.userKey.create({
   *   data: {
   *     // ... data to create a UserKey
   *   }
   * })
   * 
   */
  create<T extends UserKeyCreateArgs>(args: Prisma.SelectSubset<T, UserKeyCreateArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserKeys.
   * @param {UserKeyCreateManyArgs} args - Arguments to create many UserKeys.
   * @example
   * // Create many UserKeys
   * const userKey = await prisma.userKey.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserKeyCreateManyArgs>(args?: Prisma.SelectSubset<T, UserKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserKeys and returns the data saved in the database.
   * @param {UserKeyCreateManyAndReturnArgs} args - Arguments to create many UserKeys.
   * @example
   * // Create many UserKeys
   * const userKey = await prisma.userKey.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserKeys and only return the `id`
   * const userKeyWithIdOnly = await prisma.userKey.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserKeyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserKey.
   * @param {UserKeyDeleteArgs} args - Arguments to delete one UserKey.
   * @example
   * // Delete one UserKey
   * const UserKey = await prisma.userKey.delete({
   *   where: {
   *     // ... filter to delete one UserKey
   *   }
   * })
   * 
   */
  delete<T extends UserKeyDeleteArgs>(args: Prisma.SelectSubset<T, UserKeyDeleteArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserKey.
   * @param {UserKeyUpdateArgs} args - Arguments to update one UserKey.
   * @example
   * // Update one UserKey
   * const userKey = await prisma.userKey.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserKeyUpdateArgs>(args: Prisma.SelectSubset<T, UserKeyUpdateArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserKeys.
   * @param {UserKeyDeleteManyArgs} args - Arguments to filter UserKeys to delete.
   * @example
   * // Delete a few UserKeys
   * const { count } = await prisma.userKey.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserKeyDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserKeys
   * const userKey = await prisma.userKey.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserKeyUpdateManyArgs>(args: Prisma.SelectSubset<T, UserKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserKeys and returns the data updated in the database.
   * @param {UserKeyUpdateManyAndReturnArgs} args - Arguments to update many UserKeys.
   * @example
   * // Update many UserKeys
   * const userKey = await prisma.userKey.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserKeys and only return the `id`
   * const userKeyWithIdOnly = await prisma.userKey.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserKeyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserKey.
   * @param {UserKeyUpsertArgs} args - Arguments to update or create a UserKey.
   * @example
   * // Update or create a UserKey
   * const userKey = await prisma.userKey.upsert({
   *   create: {
   *     // ... data to create a UserKey
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserKey we want to update
   *   }
   * })
   */
  upsert<T extends UserKeyUpsertArgs>(args: Prisma.SelectSubset<T, UserKeyUpsertArgs<ExtArgs>>): Prisma.Prisma__UserKeyClient<runtime.Types.Result.GetResult<Prisma.$UserKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyCountArgs} args - Arguments to filter UserKeys to count.
   * @example
   * // Count the number of UserKeys
   * const count = await prisma.userKey.count({
   *   where: {
   *     // ... the filter for the UserKeys we want to count
   *   }
   * })
  **/
  count<T extends UserKeyCountArgs>(
    args?: Prisma.Subset<T, UserKeyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserKeyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserKey.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserKeyAggregateArgs>(args: Prisma.Subset<T, UserKeyAggregateArgs>): Prisma.PrismaPromise<GetUserKeyAggregateType<T>>

  /**
   * Group by UserKey.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserKeyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserKeyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserKeyGroupByArgs['orderBy'] }
      : { orderBy?: UserKeyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserKey model
 */
readonly fields: UserKeyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserKey.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserKeyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  messages<T extends Prisma.UserKey$messagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserKey$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserKey model
 */
export interface UserKeyFieldRefs {
  readonly id: Prisma.FieldRef<"UserKey", 'String'>
  readonly userId: Prisma.FieldRef<"UserKey", 'String'>
  readonly provider: Prisma.FieldRef<"UserKey", 'Provider'>
  readonly apiKey: Prisma.FieldRef<"UserKey", 'String'>
  readonly label: Prisma.FieldRef<"UserKey", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserKey", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserKey", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserKey findUnique
 */
export type UserKeyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserKey to fetch.
   */
  where: Prisma.UserKeyWhereUniqueInput
}

/**
 * UserKey findUniqueOrThrow
 */
export type UserKeyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserKey to fetch.
   */
  where: Prisma.UserKeyWhereUniqueInput
}

/**
 * UserKey findFirst
 */
export type UserKeyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserKey to fetch.
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserKeys to fetch.
   */
  orderBy?: Prisma.UserKeyOrderByWithRelationInput | Prisma.UserKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserKeys.
   */
  cursor?: Prisma.UserKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserKeys.
   */
  distinct?: Prisma.UserKeyScalarFieldEnum | Prisma.UserKeyScalarFieldEnum[]
}

/**
 * UserKey findFirstOrThrow
 */
export type UserKeyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserKey to fetch.
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserKeys to fetch.
   */
  orderBy?: Prisma.UserKeyOrderByWithRelationInput | Prisma.UserKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserKeys.
   */
  cursor?: Prisma.UserKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserKeys.
   */
  distinct?: Prisma.UserKeyScalarFieldEnum | Prisma.UserKeyScalarFieldEnum[]
}

/**
 * UserKey findMany
 */
export type UserKeyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserKeys to fetch.
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserKeys to fetch.
   */
  orderBy?: Prisma.UserKeyOrderByWithRelationInput | Prisma.UserKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserKeys.
   */
  cursor?: Prisma.UserKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserKeys.
   */
  skip?: number
  distinct?: Prisma.UserKeyScalarFieldEnum | Prisma.UserKeyScalarFieldEnum[]
}

/**
 * UserKey create
 */
export type UserKeyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * The data needed to create a UserKey.
   */
  data: Prisma.XOR<Prisma.UserKeyCreateInput, Prisma.UserKeyUncheckedCreateInput>
}

/**
 * UserKey createMany
 */
export type UserKeyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserKeys.
   */
  data: Prisma.UserKeyCreateManyInput | Prisma.UserKeyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserKey createManyAndReturn
 */
export type UserKeyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * The data used to create many UserKeys.
   */
  data: Prisma.UserKeyCreateManyInput | Prisma.UserKeyCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserKey update
 */
export type UserKeyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * The data needed to update a UserKey.
   */
  data: Prisma.XOR<Prisma.UserKeyUpdateInput, Prisma.UserKeyUncheckedUpdateInput>
  /**
   * Choose, which UserKey to update.
   */
  where: Prisma.UserKeyWhereUniqueInput
}

/**
 * UserKey updateMany
 */
export type UserKeyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserKeys.
   */
  data: Prisma.XOR<Prisma.UserKeyUpdateManyMutationInput, Prisma.UserKeyUncheckedUpdateManyInput>
  /**
   * Filter which UserKeys to update
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * Limit how many UserKeys to update.
   */
  limit?: number
}

/**
 * UserKey updateManyAndReturn
 */
export type UserKeyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * The data used to update UserKeys.
   */
  data: Prisma.XOR<Prisma.UserKeyUpdateManyMutationInput, Prisma.UserKeyUncheckedUpdateManyInput>
  /**
   * Filter which UserKeys to update
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * Limit how many UserKeys to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserKey upsert
 */
export type UserKeyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * The filter to search for the UserKey to update in case it exists.
   */
  where: Prisma.UserKeyWhereUniqueInput
  /**
   * In case the UserKey found by the `where` argument doesn't exist, create a new UserKey with this data.
   */
  create: Prisma.XOR<Prisma.UserKeyCreateInput, Prisma.UserKeyUncheckedCreateInput>
  /**
   * In case the UserKey was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserKeyUpdateInput, Prisma.UserKeyUncheckedUpdateInput>
}

/**
 * UserKey delete
 */
export type UserKeyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
  /**
   * Filter which UserKey to delete.
   */
  where: Prisma.UserKeyWhereUniqueInput
}

/**
 * UserKey deleteMany
 */
export type UserKeyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserKeys to delete
   */
  where?: Prisma.UserKeyWhereInput
  /**
   * Limit how many UserKeys to delete.
   */
  limit?: number
}

/**
 * UserKey.messages
 */
export type UserKey$messagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Message
   */
  select?: Prisma.MessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Message
   */
  omit?: Prisma.MessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageInclude<ExtArgs> | null
  where?: Prisma.MessageWhereInput
  orderBy?: Prisma.MessageOrderByWithRelationInput | Prisma.MessageOrderByWithRelationInput[]
  cursor?: Prisma.MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MessageScalarFieldEnum | Prisma.MessageScalarFieldEnum[]
}

/**
 * UserKey without action
 */
export type UserKeyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserKey
   */
  select?: Prisma.UserKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserKey
   */
  omit?: Prisma.UserKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserKeyInclude<ExtArgs> | null
}
