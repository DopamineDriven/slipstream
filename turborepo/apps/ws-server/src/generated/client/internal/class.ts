
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace.ts"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "/home/dopaminedriven/cloneathon/t3-chat-clone/turborepo/apps/ws-server/src/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "runtime": "nodejs",
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters",
      "queryCompiler",
      "typedSql"
    ],
    "sourceFilePath": "/home/dopaminedriven/cloneathon/t3-chat-clone/turborepo/apps/ws-server/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.15.0",
  "engineVersion": "85179d7826409ee107a6ba334b5e305ae3fba9fb",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider        = \"prisma-client\"\n  previewFeatures = [\"typedSql\", \"driverAdapters\", \"queryCompiler\"]\n  output          = \"../src/generated/client\"\n  runtime         = \"nodejs\"\n}\n\nenum ProviderAssetState {\n  PENDING\n  ACTIVE\n  EXPIRED\n  FAILED\n  DELETED\n}\n\nenum AssetType {\n  DOCUMENT\n  IMAGE\n  VIDEO\n  AUDIO\n  UNKNOWN\n}\n\nenum ChecksumAlgo {\n  CRC32\n  CRC32C\n  SHA1\n  SHA256\n  CRC64NVME\n}\n\nenum ImageFormat {\n  jpeg // .jpg, .jpeg - most common lossy format\n  png // .png - lossless with transparency\n  gif // .gif - animated, limited colors\n  webp // .webp - modern Google format\n  avif // .avif - AV1 based, very efficient\n  heic // .heic, .heif - Apple's efficient format\n  apng // .apng - animated PNG\n  bmp // .bmp - uncompressed bitmap\n  tiff // .tif, .tiff - professional/archival\n  ico // .ico - icons\n\n  // jpeg imposters\n  jxl // JPEG XL (.jxl) the newest \"JPEG\"\n  jp2 // JPEG 2000 (.jp2, .j2k)\n  jpx // JPEG 2000 extended (.jpx, .jpf)\n  jxr // JPEG XR / HD Photo (.jxr, .hdp (original name), .wdp (Windows media photo))\n  jls // JPEG-LS (lossless/near-lossless)\n\n  // vector\n  svg // .svg - scalable vector graphics\n  // raw\n  raw // generic RAW indicator\n  dng // .dng - Adobe Digital Negative\n  cr2 // .cr2 - Canon RAW 2\n  nef // .nef - Nikon Electronic Format\n  arw // .arw - Sony Alpha RAW\n\n  // HDR extensions used for 3d images\n  hdr\n  pic\n  rgbe\n  xyze\n\n  unknown\n}\n\nenum ColorSpace {\n  srgb\n  display_p3\n  adobe_rgb\n  prophoto_rgb\n  rec2020\n  rec709\n  cmyk\n  lab\n  xyz\n  gray\n  unknown\n}\n\nenum SenderType {\n  USER\n  AI\n  SYSTEM\n}\n\nenum ThemePreference {\n  LIGHT\n  DARK\n  SYSTEM\n}\n\nenum Provider {\n  OPENAI\n  GROK\n  GEMINI\n  ANTHROPIC\n  META\n  VERCEL\n}\n\nenum UploadMethod {\n  FETCHED\n  PRESIGNED\n  SERVER\n  GENERATED\n}\n\nenum AssetOrigin {\n  UPLOAD // local asset\n  REMOTE // external resource\n  GENERATED // created by generative AI\n  PASTED // pasted from clipboard\n  SCREENSHOT // specific type of capture\n  IMPORTED // migrated from another system\n  SCRAPED // extracted from web pages\n}\n\nenum AssetStatus {\n  REQUESTED\n  PLANNED\n  UPLOADING\n  STORED\n  SCANNING\n  READY\n  FAILED\n  QUARANTINED\n  ATTACHED\n  DELETED\n}\n\nmodel User {\n  id            String         @id @default(cuid(2))\n  name          String?\n  email         String         @unique\n  emailVerified DateTime?\n  image         String?\n  profile       Profile?\n  accounts      Account[]\n  sessions      Session[]\n  keys          UserKey[]\n  attachments   Attachment[]\n  conversations Conversation[]\n  settings      Settings?\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n}\n\nmodel Profile {\n  id         String  @id @default(cuid(2))\n  bio        String?\n  city       String?\n  region     String?\n  country    String?\n  postalCode String?\n  lat        Float?\n  lng        Float?\n  timezone   String?\n  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId     String  @unique\n}\n\nmodel Account {\n  id                String  @id @default(cuid(2))\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid(2))\n  sessionToken String   @unique\n  userId       String\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  expires      DateTime\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n}\n\nmodel UserKey {\n  id                  String               @id @default(cuid(2))\n  userId              String\n  provider            Provider\n  apiKey              String               @db.VarChar(512) // encrypted at rest\n  iv                  String               @db.VarChar(32) // 16-byte IV (nonce)\n  authTag             String               @db.VarChar(32) // 16-byte auth-tag\n  label               String?\n  createdAt           DateTime             @default(now())\n  updatedAt           DateTime             @updatedAt\n  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  messages            Message[]            @relation(\"MessageToUserKey\")\n  attachmentProviders AttachmentProvider[]\n  isDefault           Boolean              @default(false)\n\n  @@unique([userId, provider], name: \"userId_provider\")\n  @@map(\"UserApiKey\")\n}\n\nmodel Settings {\n  id              String           @id @default(cuid(2))\n  userId          String           @unique\n  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  theme           ThemePreference? @default(SYSTEM)\n  defaultProvider Provider?\n  defaultModel    String?\n}\n\nmodel Conversation {\n  id                   String                @id @default(cuid(2))\n  userId               String\n  userKeyId            String?\n  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)\n  title                String?\n  createdAt            DateTime              @default(now())\n  updatedAt            DateTime              @updatedAt\n  messages             Message[]\n  branchId             String? // For branching conversations\n  parentId             String? // For chat branching\n  attachments          Attachment[]\n  isShared             Boolean               @default(false)\n  shareToken           String?               @unique\n  conversationSettings ConversationSettings?\n}\n\nmodel ConversationSettings {\n  id              String       @id @default(cuid(2))\n  conversationId  String       @unique\n  systemPrompt    String?\n  enableThinking  Boolean?     @default(false)\n  trackUsage      Boolean?     @default(false)\n  enableWebSearch Boolean?     @default(false)\n  enableAssetGen  Boolean?     @default(false)\n  maxTokens       Int?\n  usageAlerts     Boolean?     @default(true)\n  temperature     Float?       @default(1.0)\n  topP            Float?       @default(1.0)\n  createdAt       DateTime     @default(now())\n  updatedAt       DateTime     @updatedAt\n  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n}\n\nmodel Message {\n  id               String       @id @default(cuid(2))\n  conversationId   String\n  userId           String?\n  senderType       SenderType   @default(USER)\n  provider         Provider\n  model            String?\n  userKeyId        String?\n  content          String\n  thinkingText     String?\n  thinkingDuration Int?\n  liked            Boolean?     @default(false)\n  disliked         Boolean?     @default(false)\n  tryAgain         Boolean?     @default(false) // resubmit previous prompt to output a new (branched?) response\n  createdAt        DateTime     @default(now())\n  updatedAt        DateTime     @updatedAt\n  userKey          UserKey?     @relation(\"MessageToUserKey\", fields: [userKeyId], references: [id])\n  attachments      Attachment[]\n  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n}\n\nmodel Attachment {\n  id             String       @id @default(cuid(2))\n  conversationId String?\n  draftId        String? // has the shape `${userId}~${conversationId}~${batchId}~${ordinal}` -> `${string}~${string}~${string}~${number}`\n  batchId        String?\n  userId         String\n  messageId      String?\n  s3ObjectId     String?      @unique // \"s3://bucket/key#<versionId|nov>\"\n  origin         AssetOrigin  @default(UPLOAD)\n  status         AssetStatus  @default(REQUESTED)\n  uploadMethod   UploadMethod @default(SERVER) // \"server\" | \"presigned\" | \"generated\" | \"fetched\"\n  assetType      AssetType    @default(UNKNOWN)\n\n  uploadDuration Int? // milliseconds\n  cdnUrl         String? // Cloudfront Url\n  publicUrl      String? // for backwards compat (DONT USE AS CDN URL)\n  sourceUrl      String? // uploadUrl\n  thumbnailKey   String? // image/video thumbnails\n\n  bucket    String\n  key       String\n  versionId String?\n  region    String  @default(\"us-east-1\")\n\n  cacheControl       String?\n  contentDisposition String?\n  contentEncoding    String?\n  expiresAt          DateTime?\n\n  size           BigInt?\n  filename       String?\n  ext            String?\n  mime           String?\n  etag           String?\n  checksumAlgo   ChecksumAlgo @default(SHA256)\n  checksumSha256 String?\n\n  storageClass   String?\n  sseAlgorithm   String? // e.g., \"aws:kms\"\n  sseKmsKeyId    String?\n  s3LastModified DateTime? // from HeadObject\n  deletedAt      DateTime? // soft deletes\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n\n  conversation  Conversation?        @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n  message       Message?             @relation(fields: [messageId], references: [id], onDelete: SetNull)\n  providerLinks AttachmentProvider[]\n  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  image         ImageMetadata?\n  video         VideoMetadata?\n  document      DocumentMetadata?\n  audio         AudioMetadata?\n\n  @@index([checksumSha256])\n  @@index([assetType, createdAt])\n  @@index([conversationId, createdAt])\n  @@index([draftId])\n  @@index([batchId, conversationId])\n  @@index([userId, createdAt])\n}\n\nmodel AttachmentProvider {\n  id             String             @id @default(cuid(2))\n  attachmentId   String\n  provider       Provider\n  userKeyId      String?\n  keyFingerprint String             @db.VarChar(128) // \"server\" or real userKeyId if defined\n  state          ProviderAssetState @default(PENDING)\n\n  // provider-specific refs\n  providerUri   String?\n  providerRef   String?\n  mime          String?\n  size          BigInt?\n  readyAt       DateTime?\n  expiresAt     DateTime? // ~48h TTL minus safety margin for gemini\n  lastCheckedAt DateTime?\n  errorCode     String?\n  errorMessage  String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)\n  userKey    UserKey?   @relation(fields: [userKeyId], references: [id], onDelete: SetNull)\n\n  @@unique([attachmentId, provider, keyFingerprint], name: \"attachmentId_provider_keyFingerprint\")\n  @@index([provider, keyFingerprint, expiresAt])\n  @@index([provider, providerRef])\n  @@index([attachmentId, provider])\n  @@index([provider, state, expiresAt])\n}\n\nmodel ImageMetadata {\n  attachmentId String     @id\n  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)\n\n  format      ImageFormat @default(unknown)\n  width       Int\n  height      Int\n  aspectRatio Float?      @default(1.0)\n  frames      Int         @default(1) // >1 => animated\n  hasAlpha    Boolean?\n  animated    Boolean     @default(false)\n\n  orientation Int?        @db.SmallInt // EXIF orientation if preserved\n  colorSpace  ColorSpace?\n\n  // optional EXIF bits\n  exifDateTimeOriginal DateTime?\n  cameraMake           String?\n  cameraModel          String?\n  lensModel            String?\n\n  // optional GPS\n  gpsLat Decimal? @db.Decimal(10, 7)\n  gpsLon Decimal? @db.Decimal(10, 7)\n\n  // display sugar\n  dominantColorHex String? @db.VarChar(7) // \"#RRGGBB\"\n  iccProfile       String? // \"Display P3\" etc.\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([format])\n  @@index([width, height])\n  @@index([animated])\n}\n\nmodel VideoMetadata {\n  attachmentId String     @id\n  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)\n  format       String\n  width        Int\n  height       Int\n  aspectRatio  Float?     @default(1.0)\n  duration     Int // milliseconds\n  frameRate    Decimal?   @db.Decimal(5, 2)\n  bitrate      Int? // kbps\n  codec        String? // h264, h265, av1, etc.\n  hasAudio     Boolean    @default(false)\n\n  // Video-specific\n  resolution  String? // \"1080p\", \"4K\", etc. (denormalized for convenience)\n  orientation Int?    @db.SmallInt\n  rotation    Int? // 0, 90, 180, 270\n\n  // Optional thumbnails info\n  thumbnailCount Int?  @default(0)\n  keyframeTimes  Int[] // array of millisecond timestamps\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([duration])\n  @@index([resolution])\n  @@index([format])\n}\n\nmodel AudioMetadata {\n  attachmentId String     @id\n  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)\n  format       String\n  duration     Int // milliseconds\n  bitrate      Int? // kbps\n  sampleRate   Int? // Hz (44100, 48000, etc.)\n  channels     Int? // 1=mono, 2=stereo, 6=5.1, etc.\n  codec        String? // mp3, aac, opus, flac, etc.\n\n  // Optional metadata\n  title  String?\n  artist String?\n  album  String?\n  year   Int?    @db.SmallInt\n  genre  String?\n\n  // Waveform data for visualization (stored as array of peaks)\n  waveformPeaks Int[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([duration])\n  @@index([artist, album])\n  @@index([format])\n}\n\nmodel DocumentMetadata {\n  attachmentId String     @id\n  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)\n  format       String\n  pageCount    Int?\n  wordCount    Int?\n  language     String? // ISO 639-1 code\n\n  // Document-specific\n  title    String?\n  author   String?\n  subject  String?\n  keywords String[] // array of keywords\n\n  // For PDFs\n  pdfVersion   String? // \"1.4\", \"1.7\", etc.\n  isEncrypted  Boolean @default(false)\n  isSearchable Boolean @default(true) // has text layer\n\n  // For text documents\n  encoding  String? // UTF-8, etc.\n  lineCount Int?\n\n  // Extracted text preview (first ~500 chars)\n  textPreview String? @db.Text\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([pageCount])\n  @@index([language])\n  @@index([format])\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@id([identifier, token])\n}\n",
  "inlineSchemaHash": "34b7bf106902c6ff102c63f2156f9ab63b40e00d2f84b076caf45751d3008d86",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"keys\",\"kind\":\"object\",\"type\":\"UserKey\",\"relationName\":\"UserToUserKey\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToUser\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToUser\"},{\"name\":\"settings\",\"kind\":\"object\",\"type\":\"Settings\",\"relationName\":\"SettingsToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"lng\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfileToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UserKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"enum\",\"type\":\"Provider\"},{\"name\":\"apiKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"iv\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authTag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserKey\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToUserKey\"},{\"name\":\"attachmentProviders\",\"kind\":\"object\",\"type\":\"AttachmentProvider\",\"relationName\":\"AttachmentProviderToUserKey\"},{\"name\":\"isDefault\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":\"UserApiKey\"},\"Settings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SettingsToUser\"},{\"name\":\"theme\",\"kind\":\"enum\",\"type\":\"ThemePreference\"},{\"name\":\"defaultProvider\",\"kind\":\"enum\",\"type\":\"Provider\"},{\"name\":\"defaultModel\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userKeyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"branchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToConversation\"},{\"name\":\"isShared\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"shareToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationSettings\",\"kind\":\"object\",\"type\":\"ConversationSettings\",\"relationName\":\"ConversationToConversationSettings\"}],\"dbName\":null},\"ConversationSettings\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"systemPrompt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enableThinking\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"trackUsage\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"enableWebSearch\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"enableAssetGen\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"maxTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"usageAlerts\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"topP\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToConversationSettings\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"senderType\",\"kind\":\"enum\",\"type\":\"SenderType\"},{\"name\":\"provider\",\"kind\":\"enum\",\"type\":\"Provider\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userKeyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thinkingText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thinkingDuration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"liked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"disliked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"tryAgain\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userKey\",\"kind\":\"object\",\"type\":\"UserKey\",\"relationName\":\"MessageToUserKey\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToMessage\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"}],\"dbName\":null},\"Attachment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"draftId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"s3ObjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"origin\",\"kind\":\"enum\",\"type\":\"AssetOrigin\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AssetStatus\"},{\"name\":\"uploadMethod\",\"kind\":\"enum\",\"type\":\"UploadMethod\"},{\"name\":\"assetType\",\"kind\":\"enum\",\"type\":\"AssetType\"},{\"name\":\"uploadDuration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cdnUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sourceUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bucket\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"versionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cacheControl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentDisposition\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentEncoding\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"filename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ext\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"etag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"checksumAlgo\",\"kind\":\"enum\",\"type\":\"ChecksumAlgo\"},{\"name\":\"checksumSha256\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"storageClass\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sseAlgorithm\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sseKmsKeyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"s3LastModified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"AttachmentToConversation\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"AttachmentToMessage\"},{\"name\":\"providerLinks\",\"kind\":\"object\",\"type\":\"AttachmentProvider\",\"relationName\":\"AttachmentToAttachmentProvider\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AttachmentToUser\"},{\"name\":\"image\",\"kind\":\"object\",\"type\":\"ImageMetadata\",\"relationName\":\"AttachmentToImageMetadata\"},{\"name\":\"video\",\"kind\":\"object\",\"type\":\"VideoMetadata\",\"relationName\":\"AttachmentToVideoMetadata\"},{\"name\":\"document\",\"kind\":\"object\",\"type\":\"DocumentMetadata\",\"relationName\":\"AttachmentToDocumentMetadata\"},{\"name\":\"audio\",\"kind\":\"object\",\"type\":\"AudioMetadata\",\"relationName\":\"AttachmentToAudioMetadata\"}],\"dbName\":null},\"AttachmentProvider\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"enum\",\"type\":\"Provider\"},{\"name\":\"userKeyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keyFingerprint\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"enum\",\"type\":\"ProviderAssetState\"},{\"name\":\"providerUri\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerRef\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"readyAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastCheckedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"errorCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attachment\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToAttachmentProvider\"},{\"name\":\"userKey\",\"kind\":\"object\",\"type\":\"UserKey\",\"relationName\":\"AttachmentProviderToUserKey\"}],\"dbName\":null},\"ImageMetadata\":{\"fields\":[{\"name\":\"attachmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachment\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToImageMetadata\"},{\"name\":\"format\",\"kind\":\"enum\",\"type\":\"ImageFormat\"},{\"name\":\"width\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"height\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"aspectRatio\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"frames\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hasAlpha\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"animated\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"orientation\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"colorSpace\",\"kind\":\"enum\",\"type\":\"ColorSpace\"},{\"name\":\"exifDateTimeOriginal\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cameraMake\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cameraModel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lensModel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gpsLat\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"gpsLon\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"dominantColorHex\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"iccProfile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"VideoMetadata\":{\"fields\":[{\"name\":\"attachmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachment\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToVideoMetadata\"},{\"name\":\"format\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"width\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"height\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"aspectRatio\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"frameRate\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"bitrate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"codec\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hasAudio\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"resolution\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orientation\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rotation\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"thumbnailCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"keyframeTimes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AudioMetadata\":{\"fields\":[{\"name\":\"attachmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachment\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToAudioMetadata\"},{\"name\":\"format\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bitrate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sampleRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"channels\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"codec\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"artist\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"album\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"genre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"waveformPeaks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"DocumentMetadata\":{\"fields\":[{\"name\":\"attachmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachment\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToDocumentMetadata\"},{\"name\":\"format\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pageCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wordCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keywords\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pdfVersion\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isEncrypted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isSearchable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"encoding\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lineCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"textPreview\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Executes a typed SQL query and returns a typed result
   * @example
   * ```
   * import { myQuery } from '@prisma/client/sql'
   * 
   * const result = await prisma.$queryRawTyped(myQuery())
   * ```
   */
  $queryRawTyped<T>(typedSql: runtime.TypedSql<unknown[], T>): Prisma.PrismaPromise<T[]>

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userKey`: Exposes CRUD operations for the **UserKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserKeys
    * const userKeys = await prisma.userKey.findMany()
    * ```
    */
  get userKey(): Prisma.UserKeyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.conversationSettings`: Exposes CRUD operations for the **ConversationSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConversationSettings
    * const conversationSettings = await prisma.conversationSettings.findMany()
    * ```
    */
  get conversationSettings(): Prisma.ConversationSettingsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attachmentProvider`: Exposes CRUD operations for the **AttachmentProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttachmentProviders
    * const attachmentProviders = await prisma.attachmentProvider.findMany()
    * ```
    */
  get attachmentProvider(): Prisma.AttachmentProviderDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.imageMetadata`: Exposes CRUD operations for the **ImageMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageMetadata
    * const imageMetadata = await prisma.imageMetadata.findMany()
    * ```
    */
  get imageMetadata(): Prisma.ImageMetadataDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.videoMetadata`: Exposes CRUD operations for the **VideoMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VideoMetadata
    * const videoMetadata = await prisma.videoMetadata.findMany()
    * ```
    */
  get videoMetadata(): Prisma.VideoMetadataDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.audioMetadata`: Exposes CRUD operations for the **AudioMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AudioMetadata
    * const audioMetadata = await prisma.audioMetadata.findMany()
    * ```
    */
  get audioMetadata(): Prisma.AudioMetadataDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.documentMetadata`: Exposes CRUD operations for the **DocumentMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentMetadata
    * const documentMetadata = await prisma.documentMetadata.findMany()
    * ```
    */
  get documentMetadata(): Prisma.DocumentMetadataDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
