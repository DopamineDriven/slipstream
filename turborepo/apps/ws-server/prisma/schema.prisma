datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client"
  output   = "../src/generated/client"
}

enum AssetType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  UNKNOWN
}

enum ChecksumAlgo {
  CRC32
  CRC32C
  SHA1
  SHA256
  CRC64NVME
}

enum ImageFormat {
  jpeg // .jpg, .jpeg - most common lossy format
  png // .png - lossless with transparency
  gif // .gif - animated, limited colors
  webp // .webp - modern Google format
  avif // .avif - AV1 based, very efficient
  heic // .heic, .heif - Apple's efficient format
  apng // .apng - animated PNG
  bmp // .bmp - uncompressed bitmap
  tiff // .tif, .tiff - professional/archival
  ico // .ico - icons

  // jpeg imposters
  jxl // JPEG XL (.jxl) the newest "JPEG"
  jp2 // JPEG 2000 (.jp2, .j2k)
  jpx // JPEG 2000 extended (.jpx, .jpf)
  jxr // JPEG XR / HD Photo (.jxr, .hdp (original name), .wdp (Windows media photo))
  jls // JPEG-LS (lossless/near-lossless)

  // vector
  svg // .svg - scalable vector graphics
  // raw
  raw // generic RAW indicator
  dng // .dng - Adobe Digital Negative
  cr2 // .cr2 - Canon RAW 2
  nef // .nef - Nikon Electronic Format
  arw // .arw - Sony Alpha RAW

  // HDR extensions used for 3d images
  hdr
  pic
  rgbe
  xyze

  unknown
}

enum ColorSpace {
  srgb
  display_p3
  adobe_rgb
  prophoto_rgb
  rec2020
  rec709
  cmyk
  lab
  xyz
  gray
  unknown
}

enum SenderType {
  USER
  AI
  SYSTEM
}

enum ThemePreference {
  LIGHT
  DARK
  SYSTEM
}

enum Provider {
  OPENAI
  GROK
  GEMINI
  ANTHROPIC
  META
  VERCEL
}

enum UploadMethod {
  FETCHED
  PRESIGNED
  SERVER
  GENERATED
}

enum AssetOrigin {
  UPLOAD // local asset
  REMOTE // external resource
  GENERATED // created by generative AI
  PASTED // pasted from clipboard
  SCREENSHOT // specific type of capture
  IMPORTED // migrated from another system
  SCRAPED // extracted from web pages
}

enum AssetStatus {
  REQUESTED
  PLANNED
  UPLOADING
  STORED
  SCANNING
  READY
  FAILED
  QUARANTINED
  ATTACHED
  DELETED
}

model User {
  id            String         @id @default(cuid(2))
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  keys          UserKey[]
  attachments   Attachment[]
  conversations Conversation[]
  settings      Settings?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Profile {
  id         String  @id @default(cuid(2))
  bio        String?
  city       String?
  region     String?
  country    String?
  postalCode String?
  lat        Float?
  lng        Float?
  timezone   String?
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @unique
}

model Account {
  id                String  @id @default(cuid(2))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid(2))
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserKey {
  id        String    @id @default(cuid(2))
  userId    String
  provider  Provider
  apiKey    String    @db.VarChar(512) // encrypted at rest
  iv        String    @db.VarChar(32) // 16-byte IV (nonce)
  authTag   String    @db.VarChar(32) // 16-byte auth-tag
  label     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[] @relation("MessageToUserKey")
  isDefault Boolean   @default(false)

  @@unique([userId, provider], name: "userId_provider")
  @@map("UserApiKey")
}

model Settings {
  id              String           @id @default(cuid(2))
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme           ThemePreference? @default(SYSTEM)
  defaultProvider Provider?
  defaultModel    String?
}

model Conversation {
  id                   String                @id @default(cuid(2))
  userId               String
  userKeyId            String?
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  messages             Message[]
  branchId             String? // For branching conversations
  parentId             String? // For chat branching
  attachments          Attachment[]
  isShared             Boolean               @default(false)
  shareToken           String?               @unique
  conversationSettings ConversationSettings?
}

model ConversationSettings {
  id              String       @id @default(cuid(2))
  conversationId  String       @unique
  systemPrompt    String?
  enableThinking  Boolean?     @default(false)
  trackUsage      Boolean?     @default(false)
  enableWebSearch Boolean?     @default(false)
  enableAssetGen  Boolean?     @default(false)
  maxTokens       Int?
  usageAlerts     Boolean?     @default(true)
  temperature     Float?       @default(1.0)
  topP            Float?       @default(1.0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Message {
  id               String       @id @default(cuid(2))
  conversationId   String
  userId           String?
  senderType       SenderType   @default(USER)
  provider         Provider
  model            String?
  userKeyId        String?
  content          String
  thinkingText     String?
  thinkingDuration Int?
  liked            Boolean?     @default(false)
  disliked         Boolean?     @default(false)
  tryAgain         Boolean?     @default(false) // resubmit previous prompt to output a new (branched?) response
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userKey          UserKey?     @relation("MessageToUserKey", fields: [userKeyId], references: [id])
  attachments      Attachment[]
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Attachment {
  id             String       @id @default(cuid(2))
  conversationId String?
  draftId        String? // has the shape `${userId}~${conversationId}~${batchId}~${ordinal}` -> `${string}~${string}~${string}~${number}`
  batchId        String?
  userId         String
  messageId      String?
  s3ObjectId     String?      @unique // "s3://bucket/key#<versionId|nov>"
  origin         AssetOrigin  @default(UPLOAD)
  status         AssetStatus  @default(REQUESTED)
  uploadMethod   UploadMethod @default(SERVER) // "server" | "presigned" | "generated" | "fetched"
  assetType      AssetType    @default(UNKNOWN)

  uploadDuration Int? // milliseconds
  cdnUrl         String? // Cloudfront Url
  publicUrl      String? // for backwards compat (DONT USE AS CDN URL)
  sourceUrl      String? // uploadUrl
  thumbnailKey   String? // image/video thumbnails

  bucket    String
  key       String
  versionId String?
  region    String  @default("us-east-1")

  cacheControl       String?
  contentDisposition String?
  contentEncoding    String?
  expiresAt          DateTime?

  size           BigInt?
  filename       String?
  ext            String?
  mime           String?
  etag           String?
  checksumAlgo   ChecksumAlgo @default(SHA256)
  checksumSha256 String?

  storageClass   String?
  sseAlgorithm   String? // e.g., "aws:kms"
  sseKmsKeyId    String?
  s3LastModified DateTime? // from HeadObject
  deletedAt      DateTime? // soft deletes
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversation Conversation?     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message      Message?          @relation(fields: [messageId], references: [id], onDelete: SetNull)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  image        ImageMetadata?
  video        VideoMetadata?
  document     DocumentMetadata?
  audio        AudioMetadata?

  @@index([assetType, createdAt])
  @@index([conversationId, createdAt])
  @@index([draftId])
  @@index([batchId, conversationId])
  @@index([userId, createdAt])
}

model ImageMetadata {
  attachmentId String     @id
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  format      ImageFormat @default(unknown)
  width       Int
  height      Int
  aspectRatio Decimal     @db.Decimal(6, 4) // store precomputed (e.g., 1.778)
  frames      Int         @default(1) // >1 => animated
  hasAlpha    Boolean?
  animated    Boolean     @default(false)

  orientation Int?        @db.SmallInt // EXIF orientation if preserved
  colorSpace  ColorSpace?

  // optional EXIF bits
  exifDateTimeOriginal DateTime?
  cameraMake           String?
  cameraModel          String?
  lensModel            String?

  // optional GPS
  gpsLat Decimal? @db.Decimal(10, 7)
  gpsLon Decimal? @db.Decimal(10, 7)

  // display sugar
  dominantColorHex String? @db.VarChar(7) // "#RRGGBB"
  iccProfile       String? // "Display P3" etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([format])
  @@index([width, height])
  @@index([animated])
}

model VideoMetadata {
  attachmentId String     @id
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  format       String
  width        Int
  height       Int
  aspectRatio  Decimal    @db.Decimal(6, 4)
  duration     Int // milliseconds
  frameRate    Decimal?   @db.Decimal(5, 2)
  bitrate      Int? // kbps
  codec        String? // h264, h265, av1, etc.
  hasAudio     Boolean    @default(false)

  // Video-specific
  resolution  String? // "1080p", "4K", etc. (denormalized for convenience)
  orientation Int?    @db.SmallInt
  rotation    Int? // 0, 90, 180, 270

  // Optional thumbnails info
  thumbnailCount Int?  @default(0)
  keyframeTimes  Int[] // array of millisecond timestamps

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([duration])
  @@index([resolution])
  @@index([format])
}

model AudioMetadata {
  attachmentId String     @id
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  format       String
  duration     Int // milliseconds
  bitrate      Int? // kbps
  sampleRate   Int? // Hz (44100, 48000, etc.)
  channels     Int? // 1=mono, 2=stereo, 6=5.1, etc.
  codec        String? // mp3, aac, opus, flac, etc.

  // Optional metadata
  title  String?
  artist String?
  album  String?
  year   Int?    @db.SmallInt
  genre  String?

  // Waveform data for visualization (stored as array of peaks)
  waveformPeaks Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([duration])
  @@index([artist, album])
  @@index([format])
}

model DocumentMetadata {
  attachmentId String     @id
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  format       String
  pageCount    Int?
  wordCount    Int?
  language     String? // ISO 639-1 code

  // Document-specific
  title    String?
  author   String?
  subject  String?
  keywords String[] // array of keywords

  // For PDFs
  pdfVersion   String? // "1.4", "1.7", etc.
  isEncrypted  Boolean @default(false)
  isSearchable Boolean @default(true) // has text layer

  // For text documents
  encoding  String? // UTF-8, etc.
  lineCount Int?

  // Extracted text preview (first ~500 chars)
  textPreview String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pageCount])
  @@index([language])
  @@index([format])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
